// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'api/simple.dart';
import 'copy_client/client.dart';
import 'copy_client/dtos.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'udto.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1814915168;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_kobi',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiApiAppendDownload({required UIQueryDownloadComic data});

  Future<UIPageBrowseComic> crateApiApiBrowser(
      {required BigInt offset, required BigInt limit});

  Future<UICacheImage> crateApiApiCacheImage(
      {required String cacheKey,
      required String url,
      required String useful,
      String? extendsFieldFirst,
      String? extendsFieldSecond,
      String? extendsFieldThird});

  Future<void> crateApiApiCleanCache({required PlatformInt64 time});

  Future<UIPageCollectedComic> crateApiApiCollectFromAccount(
      {required PlatformInt64 freeType,
      required String ordering,
      required BigInt offset,
      required BigInt limit});

  Future<void> crateApiApiCollectToAccount(
      {required String comicId,
      required bool isCollect,
      required String comicPathWord});

  Future<UIComicData> crateApiApiComic({required String pathWord});

  Future<UIChapterData> crateApiApiComicChapterData(
      {required String comicPathWord, required String chapterUuid});

  Future<UIPageComicChapter> crateApiApiComicChapters(
      {required String comicPathWord,
      required String groupPathWord,
      required BigInt limit,
      required BigInt offset});

  Future<UIComicQuery> crateApiApiComicQuery({required String pathWord});

  Future<UIPageUIComicInList> crateApiApiComicSearch(
      {required String qType,
      required String q,
      required BigInt offset,
      required BigInt limit});

  Future<UIPageComment> crateApiApiComments(
      {required String comicId,
      String? replyId,
      required BigInt offset,
      required BigInt limit});

  Future<void> crateApiApiCopyImage(
      {required String path, required String toDir});

  Future<void> crateApiApiDeleteAllComicViewLogs();

  Future<void> crateApiApiDeleteComicViewLog({required String pathWord});

  Future<void> crateApiApiDeleteDownloadComic({required String comicPathWord});

  Future<void> crateApiApiDeleteHeader({required List<String> keys});

  Future<String> crateApiApiDesktopRoot();

  Future<List<UIDownloadComicChapter>> crateApiApiDownloadComicChapters(
      {required String comicPathWord});

  Future<List<UIDownloadComicGroup>> crateApiApiDownloadComicGroups(
      {required String comicPathWord});

  Future<List<UIDownloadComicPage>> crateApiApiDownloadComicPages(
      {required String comicPathWord, required String chapterUuid});

  Future<List<UIDownloadComic>> crateApiApiDownloadComics();

  Future<bool> crateApiApiDownloadIsPause();

  Future<void> crateApiApiDownloadSetPause({required bool pause});

  Future<UIPageComicInExplore> crateApiApiExploreByAuthor(
      {required String author,
      String? ordering,
      required BigInt offset,
      required BigInt limit});

  Future<UIPageComicInExplore> crateApiApiExploreByAuthorName(
      {required String authorName,
      String? ordering,
      required BigInt offset,
      required BigInt limit});

  Future<UIPageComicInExplore> crateApiApiExplorer(
      {String? ordering,
      String? top,
      String? theme,
      required BigInt offset,
      required BigInt limit});

  Future<void> crateApiApiExports(
      {required List<String> uuidList,
      required String exportToFolder,
      required ExportsType exportsType});

  Future<UIViewLog?> crateApiApiFindComicViewLog({required String pathWord});

  Future<List<CopyHeader>> crateApiApiGetAllHeaders();

  Future<String> crateApiApiGetApiHost();

  Future<String?> crateApiApiGetHeader({required String key});

  Future<String> crateApiApiGetProxy();

  String crateApiSimpleGreet({required String name});

  Future<String> crateApiApiHttpGet({required String url});

  Future<List<String>> crateApiApiInDownloadChapterUuid(
      {required String comicPathWord});

  Future<void> crateApiApiInit({required String root});

  Future<void> crateApiSimpleInitApp();

  Future<UILoginState> crateApiApiInitLoginState();

  Future<UIPageUIViewLog> crateApiApiListComicViewLogs(
      {required PlatformInt64 offset, required PlatformInt64 limit});

  Future<String> crateApiApiLoadProperty({required String k});

  Future<UILoginState> crateApiApiLogin(
      {required String username, required String password});

  Future<UIPageRankItem> crateApiApiRank(
      {required String dateType,
      required BigInt offset,
      required BigInt limit});

  Future<UIPageUIComicInList> crateApiApiRecommends(
      {required BigInt offset, required BigInt limit});

  Future<UIRegisterResult> crateApiApiRegister(
      {required String username, required String password});

  Future<void> crateApiApiResetFailDownloads();

  Future<List<Roast>> crateApiApiRoasts({required String chapterId});

  Future<void> crateApiApiSaveProperty({required String k, required String v});

  Future<void> crateApiApiSendComment(
      {required String comicId, required String comment, String? replyId});

  Future<void> crateApiApiSetApiHost({required String api});

  Future<void> crateApiApiSetHeader(
      {required String key, required String value});

  Future<void> crateApiApiSetHeaders({required List<CopyHeader> headers});

  Future<void> crateApiApiSetProxy({required String proxy});

  Future<UITags> crateApiApiTags();

  Future<void> crateApiApiViewChapterPage(
      {required String comicPathWord,
      required String chapterUuid,
      required String chapterName,
      required PlatformInt64 chapterOrdered,
      required PlatformInt64 chapterSize,
      required PlatformInt64 chapterCount,
      required int pageRank});

  Future<void> crateApiApiViewComicInfo(
      {required String comicPathWord,
      required String comicName,
      required List<Author> comicAuthors,
      required String comicCover});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiApiAppendDownload({required UIQueryDownloadComic data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ui_query_download_comic(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiAppendDownloadConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAppendDownloadConstMeta => const TaskConstMeta(
        debugName: "append_download",
        argNames: ["data"],
      );

  @override
  Future<UIPageBrowseComic> crateApiApiBrowser(
      {required BigInt offset, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_browse_comic,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiBrowserConstMeta,
      argValues: [offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiBrowserConstMeta => const TaskConstMeta(
        debugName: "browser",
        argNames: ["offset", "limit"],
      );

  @override
  Future<UICacheImage> crateApiApiCacheImage(
      {required String cacheKey,
      required String url,
      required String useful,
      String? extendsFieldFirst,
      String? extendsFieldSecond,
      String? extendsFieldThird}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(cacheKey, serializer);
        sse_encode_String(url, serializer);
        sse_encode_String(useful, serializer);
        sse_encode_opt_String(extendsFieldFirst, serializer);
        sse_encode_opt_String(extendsFieldSecond, serializer);
        sse_encode_opt_String(extendsFieldThird, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_cache_image,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCacheImageConstMeta,
      argValues: [
        cacheKey,
        url,
        useful,
        extendsFieldFirst,
        extendsFieldSecond,
        extendsFieldThird
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCacheImageConstMeta => const TaskConstMeta(
        debugName: "cache_image",
        argNames: [
          "cacheKey",
          "url",
          "useful",
          "extendsFieldFirst",
          "extendsFieldSecond",
          "extendsFieldThird"
        ],
      );

  @override
  Future<void> crateApiApiCleanCache({required PlatformInt64 time}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(time, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCleanCacheConstMeta,
      argValues: [time],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCleanCacheConstMeta => const TaskConstMeta(
        debugName: "clean_cache",
        argNames: ["time"],
      );

  @override
  Future<UIPageCollectedComic> crateApiApiCollectFromAccount(
      {required PlatformInt64 freeType,
      required String ordering,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(freeType, serializer);
        sse_encode_String(ordering, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_collected_comic,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCollectFromAccountConstMeta,
      argValues: [freeType, ordering, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCollectFromAccountConstMeta =>
      const TaskConstMeta(
        debugName: "collect_from_account",
        argNames: ["freeType", "ordering", "offset", "limit"],
      );

  @override
  Future<void> crateApiApiCollectToAccount(
      {required String comicId,
      required bool isCollect,
      required String comicPathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicId, serializer);
        sse_encode_bool(isCollect, serializer);
        sse_encode_String(comicPathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCollectToAccountConstMeta,
      argValues: [comicId, isCollect, comicPathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCollectToAccountConstMeta =>
      const TaskConstMeta(
        debugName: "collect_to_account",
        argNames: ["comicId", "isCollect", "comicPathWord"],
      );

  @override
  Future<UIComicData> crateApiApiComic({required String pathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_comic_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiComicConstMeta,
      argValues: [pathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiComicConstMeta => const TaskConstMeta(
        debugName: "comic",
        argNames: ["pathWord"],
      );

  @override
  Future<UIChapterData> crateApiApiComicChapterData(
      {required String comicPathWord, required String chapterUuid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        sse_encode_String(chapterUuid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_chapter_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiComicChapterDataConstMeta,
      argValues: [comicPathWord, chapterUuid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiComicChapterDataConstMeta =>
      const TaskConstMeta(
        debugName: "comic_chapter_data",
        argNames: ["comicPathWord", "chapterUuid"],
      );

  @override
  Future<UIPageComicChapter> crateApiApiComicChapters(
      {required String comicPathWord,
      required String groupPathWord,
      required BigInt limit,
      required BigInt offset}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        sse_encode_String(groupPathWord, serializer);
        sse_encode_u_64(limit, serializer);
        sse_encode_u_64(offset, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_comic_chapter,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiComicChaptersConstMeta,
      argValues: [comicPathWord, groupPathWord, limit, offset],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiComicChaptersConstMeta => const TaskConstMeta(
        debugName: "comic_chapters",
        argNames: ["comicPathWord", "groupPathWord", "limit", "offset"],
      );

  @override
  Future<UIComicQuery> crateApiApiComicQuery({required String pathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_comic_query,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiComicQueryConstMeta,
      argValues: [pathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiComicQueryConstMeta => const TaskConstMeta(
        debugName: "comic_query",
        argNames: ["pathWord"],
      );

  @override
  Future<UIPageUIComicInList> crateApiApiComicSearch(
      {required String qType,
      required String q,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(qType, serializer);
        sse_encode_String(q, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_ui_comic_in_list,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiComicSearchConstMeta,
      argValues: [qType, q, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiComicSearchConstMeta => const TaskConstMeta(
        debugName: "comic_search",
        argNames: ["qType", "q", "offset", "limit"],
      );

  @override
  Future<UIPageComment> crateApiApiComments(
      {required String comicId,
      String? replyId,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicId, serializer);
        sse_encode_opt_String(replyId, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_comment,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCommentsConstMeta,
      argValues: [comicId, replyId, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCommentsConstMeta => const TaskConstMeta(
        debugName: "comments",
        argNames: ["comicId", "replyId", "offset", "limit"],
      );

  @override
  Future<void> crateApiApiCopyImage(
      {required String path, required String toDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(toDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCopyImageConstMeta,
      argValues: [path, toDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCopyImageConstMeta => const TaskConstMeta(
        debugName: "copy_image",
        argNames: ["path", "toDir"],
      );

  @override
  Future<void> crateApiApiDeleteAllComicViewLogs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDeleteAllComicViewLogsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDeleteAllComicViewLogsConstMeta =>
      const TaskConstMeta(
        debugName: "delete_all_comic_view_logs",
        argNames: [],
      );

  @override
  Future<void> crateApiApiDeleteComicViewLog({required String pathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDeleteComicViewLogConstMeta,
      argValues: [pathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDeleteComicViewLogConstMeta =>
      const TaskConstMeta(
        debugName: "delete_comic_view_log",
        argNames: ["pathWord"],
      );

  @override
  Future<void> crateApiApiDeleteDownloadComic({required String comicPathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDeleteDownloadComicConstMeta,
      argValues: [comicPathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDeleteDownloadComicConstMeta =>
      const TaskConstMeta(
        debugName: "delete_download_comic",
        argNames: ["comicPathWord"],
      );

  @override
  Future<void> crateApiApiDeleteHeader({required List<String> keys}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(keys, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDeleteHeaderConstMeta,
      argValues: [keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDeleteHeaderConstMeta => const TaskConstMeta(
        debugName: "delete_header",
        argNames: ["keys"],
      );

  @override
  Future<String> crateApiApiDesktopRoot() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDesktopRootConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDesktopRootConstMeta => const TaskConstMeta(
        debugName: "desktop_root",
        argNames: [],
      );

  @override
  Future<List<UIDownloadComicChapter>> crateApiApiDownloadComicChapters(
      {required String comicPathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_download_comic_chapter,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadComicChaptersConstMeta,
      argValues: [comicPathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadComicChaptersConstMeta =>
      const TaskConstMeta(
        debugName: "download_comic_chapters",
        argNames: ["comicPathWord"],
      );

  @override
  Future<List<UIDownloadComicGroup>> crateApiApiDownloadComicGroups(
      {required String comicPathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_download_comic_group,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadComicGroupsConstMeta,
      argValues: [comicPathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadComicGroupsConstMeta =>
      const TaskConstMeta(
        debugName: "download_comic_groups",
        argNames: ["comicPathWord"],
      );

  @override
  Future<List<UIDownloadComicPage>> crateApiApiDownloadComicPages(
      {required String comicPathWord, required String chapterUuid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        sse_encode_String(chapterUuid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_download_comic_page,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadComicPagesConstMeta,
      argValues: [comicPathWord, chapterUuid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadComicPagesConstMeta =>
      const TaskConstMeta(
        debugName: "download_comic_pages",
        argNames: ["comicPathWord", "chapterUuid"],
      );

  @override
  Future<List<UIDownloadComic>> crateApiApiDownloadComics() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_download_comic,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadComicsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadComicsConstMeta => const TaskConstMeta(
        debugName: "download_comics",
        argNames: [],
      );

  @override
  Future<bool> crateApiApiDownloadIsPause() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadIsPauseConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadIsPauseConstMeta => const TaskConstMeta(
        debugName: "download_is_pause",
        argNames: [],
      );

  @override
  Future<void> crateApiApiDownloadSetPause({required bool pause}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(pause, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDownloadSetPauseConstMeta,
      argValues: [pause],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDownloadSetPauseConstMeta =>
      const TaskConstMeta(
        debugName: "download_set_pause",
        argNames: ["pause"],
      );

  @override
  Future<UIPageComicInExplore> crateApiApiExploreByAuthor(
      {required String author,
      String? ordering,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(author, serializer);
        sse_encode_opt_String(ordering, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_comic_in_explore,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiExploreByAuthorConstMeta,
      argValues: [author, ordering, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiExploreByAuthorConstMeta => const TaskConstMeta(
        debugName: "explore_by_author",
        argNames: ["author", "ordering", "offset", "limit"],
      );

  @override
  Future<UIPageComicInExplore> crateApiApiExploreByAuthorName(
      {required String authorName,
      String? ordering,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(authorName, serializer);
        sse_encode_opt_String(ordering, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_comic_in_explore,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiExploreByAuthorNameConstMeta,
      argValues: [authorName, ordering, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiExploreByAuthorNameConstMeta =>
      const TaskConstMeta(
        debugName: "explore_by_author_name",
        argNames: ["authorName", "ordering", "offset", "limit"],
      );

  @override
  Future<UIPageComicInExplore> crateApiApiExplorer(
      {String? ordering,
      String? top,
      String? theme,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(ordering, serializer);
        sse_encode_opt_String(top, serializer);
        sse_encode_opt_String(theme, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_comic_in_explore,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiExplorerConstMeta,
      argValues: [ordering, top, theme, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiExplorerConstMeta => const TaskConstMeta(
        debugName: "explorer",
        argNames: ["ordering", "top", "theme", "offset", "limit"],
      );

  @override
  Future<void> crateApiApiExports(
      {required List<String> uuidList,
      required String exportToFolder,
      required ExportsType exportsType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(uuidList, serializer);
        sse_encode_String(exportToFolder, serializer);
        sse_encode_exports_type(exportsType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiExportsConstMeta,
      argValues: [uuidList, exportToFolder, exportsType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiExportsConstMeta => const TaskConstMeta(
        debugName: "exports",
        argNames: ["uuidList", "exportToFolder", "exportsType"],
      );

  @override
  Future<UIViewLog?> crateApiApiFindComicViewLog({required String pathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_view_log,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiFindComicViewLogConstMeta,
      argValues: [pathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiFindComicViewLogConstMeta =>
      const TaskConstMeta(
        debugName: "find_comic_view_log",
        argNames: ["pathWord"],
      );

  @override
  Future<List<CopyHeader>> crateApiApiGetAllHeaders() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_copy_header,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetAllHeadersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetAllHeadersConstMeta => const TaskConstMeta(
        debugName: "get_all_headers",
        argNames: [],
      );

  @override
  Future<String> crateApiApiGetApiHost() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetApiHostConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetApiHostConstMeta => const TaskConstMeta(
        debugName: "get_api_host",
        argNames: [],
      );

  @override
  Future<String?> crateApiApiGetHeader({required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetHeaderConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetHeaderConstMeta => const TaskConstMeta(
        debugName: "get_header",
        argNames: ["key"],
      );

  @override
  Future<String> crateApiApiGetProxy() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetProxyConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetProxyConstMeta => const TaskConstMeta(
        debugName: "get_proxy",
        argNames: [],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<String> crateApiApiHttpGet({required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiHttpGetConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiHttpGetConstMeta => const TaskConstMeta(
        debugName: "http_get",
        argNames: ["url"],
      );

  @override
  Future<List<String>> crateApiApiInDownloadChapterUuid(
      {required String comicPathWord}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiInDownloadChapterUuidConstMeta,
      argValues: [comicPathWord],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInDownloadChapterUuidConstMeta =>
      const TaskConstMeta(
        debugName: "in_download_chapter_uuid",
        argNames: ["comicPathWord"],
      );

  @override
  Future<void> crateApiApiInit({required String root}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(root, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiInitConstMeta,
      argValues: [root],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: ["root"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<UILoginState> crateApiApiInitLoginState() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiInitLoginStateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInitLoginStateConstMeta => const TaskConstMeta(
        debugName: "init_login_state",
        argNames: [],
      );

  @override
  Future<UIPageUIViewLog> crateApiApiListComicViewLogs(
      {required PlatformInt64 offset, required PlatformInt64 limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(offset, serializer);
        sse_encode_i_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_ui_view_log,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiListComicViewLogsConstMeta,
      argValues: [offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiListComicViewLogsConstMeta =>
      const TaskConstMeta(
        debugName: "list_comic_view_logs",
        argNames: ["offset", "limit"],
      );

  @override
  Future<String> crateApiApiLoadProperty({required String k}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(k, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiLoadPropertyConstMeta,
      argValues: [k],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiLoadPropertyConstMeta => const TaskConstMeta(
        debugName: "load_property",
        argNames: ["k"],
      );

  @override
  Future<UILoginState> crateApiApiLogin(
      {required String username, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiLoginConstMeta,
      argValues: [username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiLoginConstMeta => const TaskConstMeta(
        debugName: "login",
        argNames: ["username", "password"],
      );

  @override
  Future<UIPageRankItem> crateApiApiRank(
      {required String dateType,
      required BigInt offset,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dateType, serializer);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_rank_item,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRankConstMeta,
      argValues: [dateType, offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRankConstMeta => const TaskConstMeta(
        debugName: "rank",
        argNames: ["dateType", "offset", "limit"],
      );

  @override
  Future<UIPageUIComicInList> crateApiApiRecommends(
      {required BigInt offset, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(offset, serializer);
        sse_encode_u_64(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_page_ui_comic_in_list,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRecommendsConstMeta,
      argValues: [offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRecommendsConstMeta => const TaskConstMeta(
        debugName: "recommends",
        argNames: ["offset", "limit"],
      );

  @override
  Future<UIRegisterResult> crateApiApiRegister(
      {required String username, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_register_result,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRegisterConstMeta,
      argValues: [username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRegisterConstMeta => const TaskConstMeta(
        debugName: "register",
        argNames: ["username", "password"],
      );

  @override
  Future<void> crateApiApiResetFailDownloads() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiResetFailDownloadsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiResetFailDownloadsConstMeta =>
      const TaskConstMeta(
        debugName: "reset_fail_downloads",
        argNames: [],
      );

  @override
  Future<List<Roast>> crateApiApiRoasts({required String chapterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(chapterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_roast,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRoastsConstMeta,
      argValues: [chapterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRoastsConstMeta => const TaskConstMeta(
        debugName: "roasts",
        argNames: ["chapterId"],
      );

  @override
  Future<void> crateApiApiSaveProperty({required String k, required String v}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(k, serializer);
        sse_encode_String(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSavePropertyConstMeta,
      argValues: [k, v],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSavePropertyConstMeta => const TaskConstMeta(
        debugName: "save_property",
        argNames: ["k", "v"],
      );

  @override
  Future<void> crateApiApiSendComment(
      {required String comicId, required String comment, String? replyId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicId, serializer);
        sse_encode_String(comment, serializer);
        sse_encode_opt_String(replyId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSendCommentConstMeta,
      argValues: [comicId, comment, replyId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSendCommentConstMeta => const TaskConstMeta(
        debugName: "send_comment",
        argNames: ["comicId", "comment", "replyId"],
      );

  @override
  Future<void> crateApiApiSetApiHost({required String api}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(api, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSetApiHostConstMeta,
      argValues: [api],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSetApiHostConstMeta => const TaskConstMeta(
        debugName: "set_api_host",
        argNames: ["api"],
      );

  @override
  Future<void> crateApiApiSetHeader(
      {required String key, required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSetHeaderConstMeta,
      argValues: [key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSetHeaderConstMeta => const TaskConstMeta(
        debugName: "set_header",
        argNames: ["key", "value"],
      );

  @override
  Future<void> crateApiApiSetHeaders({required List<CopyHeader> headers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_copy_header(headers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSetHeadersConstMeta,
      argValues: [headers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSetHeadersConstMeta => const TaskConstMeta(
        debugName: "set_headers",
        argNames: ["headers"],
      );

  @override
  Future<void> crateApiApiSetProxy({required String proxy}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(proxy, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSetProxyConstMeta,
      argValues: [proxy],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSetProxyConstMeta => const TaskConstMeta(
        debugName: "set_proxy",
        argNames: ["proxy"],
      );

  @override
  Future<UITags> crateApiApiTags() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_tags,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiTagsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiTagsConstMeta => const TaskConstMeta(
        debugName: "tags",
        argNames: [],
      );

  @override
  Future<void> crateApiApiViewChapterPage(
      {required String comicPathWord,
      required String chapterUuid,
      required String chapterName,
      required PlatformInt64 chapterOrdered,
      required PlatformInt64 chapterSize,
      required PlatformInt64 chapterCount,
      required int pageRank}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        sse_encode_String(chapterUuid, serializer);
        sse_encode_String(chapterName, serializer);
        sse_encode_i_64(chapterOrdered, serializer);
        sse_encode_i_64(chapterSize, serializer);
        sse_encode_i_64(chapterCount, serializer);
        sse_encode_i_32(pageRank, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiViewChapterPageConstMeta,
      argValues: [
        comicPathWord,
        chapterUuid,
        chapterName,
        chapterOrdered,
        chapterSize,
        chapterCount,
        pageRank
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiViewChapterPageConstMeta => const TaskConstMeta(
        debugName: "view_chapter_page",
        argNames: [
          "comicPathWord",
          "chapterUuid",
          "chapterName",
          "chapterOrdered",
          "chapterSize",
          "chapterCount",
          "pageRank"
        ],
      );

  @override
  Future<void> crateApiApiViewComicInfo(
      {required String comicPathWord,
      required String comicName,
      required List<Author> comicAuthors,
      required String comicCover}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(comicPathWord, serializer);
        sse_encode_String(comicName, serializer);
        sse_encode_list_author(comicAuthors, serializer);
        sse_encode_String(comicCover, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiViewComicInfoConstMeta,
      argValues: [comicPathWord, comicName, comicAuthors, comicCover],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiViewComicInfoConstMeta => const TaskConstMeta(
        debugName: "view_comic_info",
        argNames: ["comicPathWord", "comicName", "comicAuthors", "comicCover"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Author dco_decode_author(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Author(
      name: dco_decode_String(arr[0]),
      alias: dco_decode_opt_String(arr[1]),
      pathWord: dco_decode_String(arr[2]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Browse dco_decode_box_autoadd_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  LastBrowse dco_decode_box_autoadd_last_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_last_browse(raw);
  }

  @protected
  MemberInfo dco_decode_box_autoadd_member_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_member_info(raw);
  }

  @protected
  RegisterResult dco_decode_box_autoadd_register_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_register_result(raw);
  }

  @protected
  UIQueryDownloadComic dco_decode_box_autoadd_ui_query_download_comic(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_query_download_comic(raw);
  }

  @protected
  UIViewLog dco_decode_box_autoadd_ui_view_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_view_log(raw);
  }

  @protected
  Browse dco_decode_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Browse(
      chapterId: dco_decode_String(arr[0]),
      chapterName: dco_decode_String(arr[1]),
      chapterUuid: dco_decode_String(arr[2]),
      comicId: dco_decode_String(arr[3]),
      comicUuid: dco_decode_String(arr[4]),
      pathWord: dco_decode_String(arr[5]),
    );
  }

  @protected
  BrowseComic dco_decode_browse_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BrowseComic(
      id: dco_decode_i_64(arr[0]),
      lastChapterId: dco_decode_String(arr[1]),
      lastChapterName: dco_decode_String(arr[2]),
      comic: dco_decode_browse_comic_comic(arr[3]),
    );
  }

  @protected
  BrowseComicComic dco_decode_browse_comic_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return BrowseComicComic(
      uuid: dco_decode_String(arr[0]),
      bDisplay: dco_decode_bool(arr[1]),
      name: dco_decode_String(arr[2]),
      pathWord: dco_decode_String(arr[3]),
      females: dco_decode_list_sexual_orientation(arr[4]),
      males: dco_decode_list_sexual_orientation(arr[5]),
      author: dco_decode_list_author(arr[6]),
      theme: dco_decode_list_tag(arr[7]),
      cover: dco_decode_String(arr[8]),
      status: dco_decode_i_64(arr[9]),
      popular: dco_decode_i_64(arr[10]),
      datetimeUpdated: dco_decode_String(arr[11]),
      lastChapterId: dco_decode_String(arr[12]),
      lastChapterName: dco_decode_String(arr[13]),
    );
  }

  @protected
  ChapterComicInfo dco_decode_chapter_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ChapterComicInfo(
      name: dco_decode_String(arr[0]),
      pathWord: dco_decode_String(arr[1]),
      restrict: dco_decode_classify_item(arr[2]),
      uuid: dco_decode_String(arr[3]),
    );
  }

  @protected
  ChapterImage dco_decode_chapter_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ChapterImage(
      url: dco_decode_String(arr[0]),
    );
  }

  @protected
  ClassifyItem dco_decode_classify_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ClassifyItem(
      display: dco_decode_String(arr[0]),
      value: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  CollectedComic dco_decode_collected_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CollectedComic(
      uuid: dco_decode_i_64(arr[0]),
      name: dco_decode_opt_String(arr[1]),
      bFolder: dco_decode_bool(arr[2]),
      folderId: dco_decode_opt_String(arr[3]),
      lastBrowse: dco_decode_opt_box_autoadd_last_browse(arr[4]),
      comic: dco_decode_collected_comic_info(arr[5]),
    );
  }

  @protected
  CollectedComicInfo dco_decode_collected_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return CollectedComicInfo(
      uuid: dco_decode_String(arr[0]),
      bDisplay: dco_decode_bool(arr[1]),
      name: dco_decode_String(arr[2]),
      pathWord: dco_decode_String(arr[3]),
      females: dco_decode_list_sexual_orientation(arr[4]),
      males: dco_decode_list_sexual_orientation(arr[5]),
      author: dco_decode_list_author(arr[6]),
      theme: dco_decode_list_tag(arr[7]),
      cover: dco_decode_String(arr[8]),
      status: dco_decode_i_64(arr[9]),
      popular: dco_decode_i_64(arr[10]),
      datetimeUpdated: dco_decode_String(arr[11]),
      lastChapterId: dco_decode_String(arr[12]),
      lastChapterName: dco_decode_String(arr[13]),
    );
  }

  @protected
  CopyHeader dco_decode_copy_header(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CopyHeader(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  ExportsType dco_decode_exports_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExportsType.values[raw as int];
  }

  @protected
  Group dco_decode_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Group(
      count: dco_decode_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      pathWord: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  LastBrowse dco_decode_last_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LastBrowse(
      lastBrowseId: dco_decode_String(arr[0]),
      lastBrowseName: dco_decode_String(arr[1]),
    );
  }

  @protected
  LastChapter dco_decode_last_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LastChapter(
      name: dco_decode_String(arr[0]),
      uuid: dco_decode_String(arr[1]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Author> dco_decode_list_author(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_author).toList();
  }

  @protected
  List<BrowseComic> dco_decode_list_browse_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_browse_comic).toList();
  }

  @protected
  List<ChapterImage> dco_decode_list_chapter_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_chapter_image).toList();
  }

  @protected
  List<CollectedComic> dco_decode_list_collected_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_collected_comic).toList();
  }

  @protected
  List<CopyHeader> dco_decode_list_copy_header(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_copy_header).toList();
  }

  @protected
  List<Group> dco_decode_list_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_group).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeInt64List(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Roast> dco_decode_list_roast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_roast).toList();
  }

  @protected
  List<SexualOrientation> dco_decode_list_sexual_orientation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sexual_orientation).toList();
  }

  @protected
  List<Tag> dco_decode_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag).toList();
  }

  @protected
  List<UIComicChapter> dco_decode_list_ui_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_comic_chapter).toList();
  }

  @protected
  List<UIComicInExplore> dco_decode_list_ui_comic_in_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_comic_in_explore).toList();
  }

  @protected
  List<UIComicInList> dco_decode_list_ui_comic_in_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_comic_in_list).toList();
  }

  @protected
  List<UIComment> dco_decode_list_ui_comment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_comment).toList();
  }

  @protected
  List<UIDownloadComic> dco_decode_list_ui_download_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_download_comic).toList();
  }

  @protected
  List<UIDownloadComicChapter> dco_decode_list_ui_download_comic_chapter(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_download_comic_chapter)
        .toList();
  }

  @protected
  List<UIDownloadComicGroup> dco_decode_list_ui_download_comic_group(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_download_comic_group)
        .toList();
  }

  @protected
  List<UIDownloadComicPage> dco_decode_list_ui_download_comic_page(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_download_comic_page)
        .toList();
  }

  @protected
  List<UIQueryDownloadComicChapter>
      dco_decode_list_ui_query_download_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_query_download_comic_chapter)
        .toList();
  }

  @protected
  List<UIQueryDownloadComicGroup> dco_decode_list_ui_query_download_comic_group(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_query_download_comic_group)
        .toList();
  }

  @protected
  List<UIRankItem> dco_decode_list_ui_rank_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_rank_item).toList();
  }

  @protected
  List<UITheme> dco_decode_list_ui_theme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_theme).toList();
  }

  @protected
  List<UIViewLog> dco_decode_list_ui_view_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_view_log).toList();
  }

  @protected
  MemberInfo dco_decode_member_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 28)
      throw Exception('unexpected arr length: expect 28 but see ${arr.length}');
    return MemberInfo(
      userId: dco_decode_String(arr[0]),
      username: dco_decode_String(arr[1]),
      nickname: dco_decode_String(arr[2]),
      avatar: dco_decode_String(arr[3]),
      isAuthenticated: dco_decode_bool(arr[4]),
      datetimeCreated: dco_decode_String(arr[5]),
      bVerifyEmail: dco_decode_bool(arr[6]),
      email: dco_decode_opt_String(arr[7]),
      mobile: dco_decode_opt_String(arr[8]),
      mobileRegion: dco_decode_opt_String(arr[9]),
      point: dco_decode_i_64(arr[10]),
      comicVip: dco_decode_i_64(arr[11]),
      comicVipEnd: dco_decode_opt_String(arr[12]),
      comicVipStart: dco_decode_opt_String(arr[13]),
      cartoonVip: dco_decode_i_64(arr[14]),
      cartoonVipEnd: dco_decode_opt_String(arr[15]),
      cartoonVipStart: dco_decode_opt_String(arr[16]),
      adsVipEnd: dco_decode_opt_String(arr[17]),
      closeReport: dco_decode_bool(arr[18]),
      downloads: dco_decode_i_64(arr[19]),
      vipDownloads: dco_decode_i_64(arr[20]),
      rewardDownloads: dco_decode_i_64(arr[21]),
      inviteCode: dco_decode_opt_String(arr[22]),
      invited: dco_decode_opt_String(arr[23]),
      bSstv: dco_decode_bool(arr[24]),
      scyAnswer: dco_decode_bool(arr[25]),
      dayDownloadsRefresh: dco_decode_String(arr[26]),
      dayDownloads: dco_decode_i_64(arr[27]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Browse? dco_decode_opt_box_autoadd_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_browse(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  LastBrowse? dco_decode_opt_box_autoadd_last_browse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_last_browse(raw);
  }

  @protected
  MemberInfo? dco_decode_opt_box_autoadd_member_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_member_info(raw);
  }

  @protected
  RegisterResult? dco_decode_opt_box_autoadd_register_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_register_result(raw);
  }

  @protected
  UIViewLog? dco_decode_opt_box_autoadd_ui_view_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_view_log(raw);
  }

  @protected
  RegisterResult dco_decode_register_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return RegisterResult(
      userId: dco_decode_String(arr[0]),
      uuid: dco_decode_String(arr[1]),
      datetimeCreated: dco_decode_String(arr[2]),
      token: dco_decode_opt_String(arr[3]),
      nickname: dco_decode_String(arr[4]),
      avatar: dco_decode_String(arr[5]),
      inviteCode: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  Roast dco_decode_roast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Roast(
      id: dco_decode_i_64(arr[0]),
      createAt: dco_decode_String(arr[1]),
      userId: dco_decode_String(arr[2]),
      userName: dco_decode_String(arr[3]),
      userAvatar: dco_decode_String(arr[4]),
      comment: dco_decode_String(arr[5]),
    );
  }

  @protected
  SexualOrientation dco_decode_sexual_orientation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SexualOrientation(
      name: dco_decode_String(arr[0]),
      pathWord: dco_decode_String(arr[1]),
      gender: dco_decode_i_64(arr[2]),
    );
  }

  @protected
  Tag dco_decode_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Tag(
      name: dco_decode_String(arr[0]),
      pathWord: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UICacheImage dco_decode_ui_cache_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return UICacheImage(
      absPath: dco_decode_String(arr[0]),
      cacheKey: dco_decode_String(arr[1]),
      cacheTime: dco_decode_i_64(arr[2]),
      url: dco_decode_String(arr[3]),
      useful: dco_decode_String(arr[4]),
      extendsFieldFirst: dco_decode_opt_String(arr[5]),
      extendsFieldSecond: dco_decode_opt_String(arr[6]),
      extendsFieldThird: dco_decode_opt_String(arr[7]),
      localPath: dco_decode_String(arr[8]),
      imageFormat: dco_decode_String(arr[9]),
      imageWidth: dco_decode_u_32(arr[10]),
      imageHeight: dco_decode_u_32(arr[11]),
    );
  }

  @protected
  UIChapterAndContents dco_decode_ui_chapter_and_contents(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 18)
      throw Exception('unexpected arr length: expect 18 but see ${arr.length}');
    return UIChapterAndContents(
      comicId: dco_decode_String(arr[0]),
      comicPathWord: dco_decode_String(arr[1]),
      contents: dco_decode_list_chapter_image(arr[2]),
      count: dco_decode_i_64(arr[3]),
      datetimeCreated: dco_decode_String(arr[4]),
      groupPathWord: dco_decode_String(arr[5]),
      imgType: dco_decode_i_64(arr[6]),
      index: dco_decode_i_64(arr[7]),
      isLong: dco_decode_bool(arr[8]),
      name: dco_decode_String(arr[9]),
      news: dco_decode_String(arr[10]),
      next: dco_decode_opt_String(arr[11]),
      ordered: dco_decode_i_64(arr[12]),
      prev: dco_decode_opt_String(arr[13]),
      size: dco_decode_i_64(arr[14]),
      typeField: dco_decode_i_64(arr[15]),
      uuid: dco_decode_String(arr[16]),
      words: dco_decode_list_prim_i_64_strict(arr[17]),
    );
  }

  @protected
  UIChapterData dco_decode_ui_chapter_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UIChapterData(
      chapter: dco_decode_ui_chapter_and_contents(arr[0]),
      comic: dco_decode_chapter_comic_info(arr[1]),
      isLock: dco_decode_bool(arr[2]),
      isLogin: dco_decode_bool(arr[3]),
      isMobileBind: dco_decode_bool(arr[4]),
      isVip: dco_decode_bool(arr[5]),
      showApp: dco_decode_bool(arr[6]),
    );
  }

  @protected
  UIComic dco_decode_ui_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 25)
      throw Exception('unexpected arr length: expect 25 but see ${arr.length}');
    return UIComic(
      alias: dco_decode_opt_String(arr[0]),
      author: dco_decode_list_author(arr[1]),
      b404: dco_decode_bool(arr[2]),
      bHidden: dco_decode_bool(arr[3]),
      ban: dco_decode_i_64(arr[4]),
      brief: dco_decode_String(arr[5]),
      closeComment: dco_decode_bool(arr[6]),
      closeRoast: dco_decode_bool(arr[7]),
      cover: dco_decode_String(arr[8]),
      datetimeUpdated: dco_decode_String(arr[9]),
      freeType: dco_decode_classify_item(arr[10]),
      imgType: dco_decode_i_64(arr[11]),
      lastChapter: dco_decode_last_chapter(arr[12]),
      name: dco_decode_String(arr[13]),
      pathWord: dco_decode_String(arr[14]),
      popular: dco_decode_i_64(arr[15]),
      reclass: dco_decode_classify_item(arr[16]),
      region: dco_decode_classify_item(arr[17]),
      restrict: dco_decode_classify_item(arr[18]),
      seoBaidu: dco_decode_String(arr[19]),
      status: dco_decode_classify_item(arr[20]),
      theme: dco_decode_list_tag(arr[21]),
      uuid: dco_decode_String(arr[22]),
      females: dco_decode_list_sexual_orientation(arr[23]),
      males: dco_decode_list_sexual_orientation(arr[24]),
    );
  }

  @protected
  UIComicChapter dco_decode_ui_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return UIComicChapter(
      comicId: dco_decode_String(arr[0]),
      comicPathWord: dco_decode_String(arr[1]),
      count: dco_decode_i_64(arr[2]),
      datetimeCreated: dco_decode_String(arr[3]),
      groupPathWord: dco_decode_String(arr[4]),
      imgType: dco_decode_i_64(arr[5]),
      index: dco_decode_i_64(arr[6]),
      name: dco_decode_String(arr[7]),
      news: dco_decode_String(arr[8]),
      next: dco_decode_opt_String(arr[9]),
      ordered: dco_decode_i_64(arr[10]),
      prev: dco_decode_opt_String(arr[11]),
      size: dco_decode_i_64(arr[12]),
      typeField: dco_decode_i_64(arr[13]),
      uuid: dco_decode_String(arr[14]),
    );
  }

  @protected
  UIComicData dco_decode_ui_comic_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UIComicData(
      comic: dco_decode_ui_comic(arr[0]),
      groups: dco_decode_list_group(arr[1]),
      isLock: dco_decode_bool(arr[2]),
      isLogin: dco_decode_bool(arr[3]),
      isMobileBind: dco_decode_bool(arr[4]),
      isVip: dco_decode_bool(arr[5]),
      popular: dco_decode_i_64(arr[6]),
    );
  }

  @protected
  UIComicInExplore dco_decode_ui_comic_in_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return UIComicInExplore(
      name: dco_decode_String(arr[0]),
      pathWord: dco_decode_String(arr[1]),
      freeType: dco_decode_classify_item(arr[2]),
      author: dco_decode_list_author(arr[3]),
      cover: dco_decode_String(arr[4]),
      popular: dco_decode_i_64(arr[5]),
      datetimeUpdated: dco_decode_opt_String(arr[6]),
      females: dco_decode_list_sexual_orientation(arr[7]),
      males: dco_decode_list_sexual_orientation(arr[8]),
    );
  }

  @protected
  UIComicInList dco_decode_ui_comic_in_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return UIComicInList(
      author: dco_decode_list_author(arr[0]),
      cover: dco_decode_String(arr[1]),
      imgType: dco_decode_i_64(arr[2]),
      name: dco_decode_String(arr[3]),
      pathWord: dco_decode_String(arr[4]),
      popular: dco_decode_i_64(arr[5]),
      females: dco_decode_list_sexual_orientation(arr[6]),
      males: dco_decode_list_sexual_orientation(arr[7]),
    );
  }

  @protected
  UIComicQuery dco_decode_ui_comic_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UIComicQuery(
      browse: dco_decode_opt_box_autoadd_browse(arr[0]),
      collect: dco_decode_opt_box_autoadd_i_64(arr[1]),
      isLock: dco_decode_bool(arr[2]),
      isLogin: dco_decode_bool(arr[3]),
      isMobileBind: dco_decode_bool(arr[4]),
      isVip: dco_decode_bool(arr[5]),
    );
  }

  @protected
  UIComment dco_decode_ui_comment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return UIComment(
      id: dco_decode_i_64(arr[0]),
      createAt: dco_decode_String(arr[1]),
      userId: dco_decode_String(arr[2]),
      userName: dco_decode_String(arr[3]),
      userAvatar: dco_decode_String(arr[4]),
      comment: dco_decode_String(arr[5]),
      count: dco_decode_i_64(arr[6]),
      parentId: dco_decode_opt_box_autoadd_i_64(arr[7]),
      parentUserId: dco_decode_opt_String(arr[8]),
      parentUserName: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  UIDownloadComic dco_decode_ui_download_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 32)
      throw Exception('unexpected arr length: expect 32 but see ${arr.length}');
    return UIDownloadComic(
      pathWord: dco_decode_String(arr[0]),
      alias: dco_decode_opt_String(arr[1]),
      author: dco_decode_String(arr[2]),
      b404: dco_decode_bool(arr[3]),
      bHidden: dco_decode_bool(arr[4]),
      ban: dco_decode_i_64(arr[5]),
      brief: dco_decode_String(arr[6]),
      closeComment: dco_decode_bool(arr[7]),
      closeRoast: dco_decode_bool(arr[8]),
      cover: dco_decode_String(arr[9]),
      datetimeUpdated: dco_decode_String(arr[10]),
      females: dco_decode_String(arr[11]),
      freeType: dco_decode_String(arr[12]),
      imgType: dco_decode_i_64(arr[13]),
      males: dco_decode_String(arr[14]),
      name: dco_decode_String(arr[15]),
      popular: dco_decode_i_64(arr[16]),
      reclass: dco_decode_String(arr[17]),
      region: dco_decode_String(arr[18]),
      restrict: dco_decode_String(arr[19]),
      seoBaidu: dco_decode_String(arr[20]),
      status: dco_decode_String(arr[21]),
      theme: dco_decode_String(arr[22]),
      uuid: dco_decode_String(arr[23]),
      coverCacheKey: dco_decode_String(arr[24]),
      coverDownloadStatus: dco_decode_i_64(arr[25]),
      coverFormat: dco_decode_String(arr[26]),
      coverWidth: dco_decode_u_32(arr[27]),
      coverHeight: dco_decode_u_32(arr[28]),
      imageCount: dco_decode_i_64(arr[29]),
      imageCountSuccess: dco_decode_i_64(arr[30]),
      downloadStatus: dco_decode_i_64(arr[31]),
    );
  }

  @protected
  UIDownloadComicChapter dco_decode_ui_download_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 17)
      throw Exception('unexpected arr length: expect 17 but see ${arr.length}');
    return UIDownloadComicChapter(
      comicPathWord: dco_decode_String(arr[0]),
      uuid: dco_decode_String(arr[1]),
      comicId: dco_decode_String(arr[2]),
      count: dco_decode_i_64(arr[3]),
      datetimeCreated: dco_decode_String(arr[4]),
      groupPathWord: dco_decode_String(arr[5]),
      imgType: dco_decode_i_64(arr[6]),
      index: dco_decode_i_64(arr[7]),
      isLong: dco_decode_bool(arr[8]),
      name: dco_decode_String(arr[9]),
      news: dco_decode_String(arr[10]),
      next: dco_decode_opt_String(arr[11]),
      ordered: dco_decode_i_64(arr[12]),
      prev: dco_decode_opt_String(arr[13]),
      size: dco_decode_i_64(arr[14]),
      typeField: dco_decode_i_64(arr[15]),
      downloadStatus: dco_decode_i_64(arr[16]),
    );
  }

  @protected
  UIDownloadComicGroup dco_decode_ui_download_comic_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UIDownloadComicGroup(
      comicPathWord: dco_decode_String(arr[0]),
      groupPathWord: dco_decode_String(arr[1]),
      count: dco_decode_i_64(arr[2]),
      name: dco_decode_String(arr[3]),
      groupRank: dco_decode_i_64(arr[4]),
    );
  }

  @protected
  UIDownloadComicPage dco_decode_ui_download_comic_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return UIDownloadComicPage(
      comicPathWord: dco_decode_String(arr[0]),
      chapterUuid: dco_decode_String(arr[1]),
      imageIndex: dco_decode_i_32(arr[2]),
      url: dco_decode_String(arr[3]),
      cacheKey: dco_decode_String(arr[4]),
      downloadStatus: dco_decode_i_64(arr[5]),
      width: dco_decode_u_32(arr[6]),
      height: dco_decode_u_32(arr[7]),
      format: dco_decode_String(arr[8]),
    );
  }

  @protected
  UILoginState dco_decode_ui_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UILoginState(
      state: dco_decode_i_64(arr[0]),
      message: dco_decode_String(arr[1]),
      member: dco_decode_opt_box_autoadd_member_info(arr[2]),
    );
  }

  @protected
  UIPageBrowseComic dco_decode_ui_page_browse_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageBrowseComic(
      list: dco_decode_list_browse_comic(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageCollectedComic dco_decode_ui_page_collected_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageCollectedComic(
      list: dco_decode_list_collected_comic(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageComicChapter dco_decode_ui_page_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageComicChapter(
      list: dco_decode_list_ui_comic_chapter(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageComicInExplore dco_decode_ui_page_comic_in_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageComicInExplore(
      list: dco_decode_list_ui_comic_in_explore(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageComment dco_decode_ui_page_comment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageComment(
      list: dco_decode_list_ui_comment(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageRankItem dco_decode_ui_page_rank_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageRankItem(
      list: dco_decode_list_ui_rank_item(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageUIComicInList dco_decode_ui_page_ui_comic_in_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageUIComicInList(
      list: dco_decode_list_ui_comic_in_list(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIPageUIViewLog dco_decode_ui_page_ui_view_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UIPageUIViewLog(
      list: dco_decode_list_ui_view_log(arr[0]),
      total: dco_decode_i_64(arr[1]),
      limit: dco_decode_i_64(arr[2]),
      offset: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  UIQueryDownloadComic dco_decode_ui_query_download_comic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 26)
      throw Exception('unexpected arr length: expect 26 but see ${arr.length}');
    return UIQueryDownloadComic(
      pathWord: dco_decode_String(arr[0]),
      alias: dco_decode_opt_String(arr[1]),
      author: dco_decode_String(arr[2]),
      b404: dco_decode_bool(arr[3]),
      bHidden: dco_decode_bool(arr[4]),
      ban: dco_decode_i_64(arr[5]),
      brief: dco_decode_String(arr[6]),
      closeComment: dco_decode_bool(arr[7]),
      closeRoast: dco_decode_bool(arr[8]),
      cover: dco_decode_String(arr[9]),
      datetimeUpdated: dco_decode_String(arr[10]),
      females: dco_decode_String(arr[11]),
      freeType: dco_decode_String(arr[12]),
      imgType: dco_decode_i_64(arr[13]),
      males: dco_decode_String(arr[14]),
      name: dco_decode_String(arr[15]),
      popular: dco_decode_i_64(arr[16]),
      reclass: dco_decode_String(arr[17]),
      region: dco_decode_String(arr[18]),
      restrict1: dco_decode_String(arr[19]),
      seoBaidu: dco_decode_String(arr[20]),
      status: dco_decode_String(arr[21]),
      theme: dco_decode_String(arr[22]),
      uuid: dco_decode_String(arr[23]),
      groups: dco_decode_list_ui_query_download_comic_group(arr[24]),
      chapters: dco_decode_list_ui_query_download_comic_chapter(arr[25]),
    );
  }

  @protected
  UIQueryDownloadComicChapter dco_decode_ui_query_download_comic_chapter(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return UIQueryDownloadComicChapter(
      comicPathWord: dco_decode_String(arr[0]),
      uuid: dco_decode_String(arr[1]),
      comicId: dco_decode_String(arr[2]),
      count: dco_decode_i_64(arr[3]),
      datetimeCreated: dco_decode_String(arr[4]),
      groupPathWord: dco_decode_String(arr[5]),
      imgType: dco_decode_i_64(arr[6]),
      index: dco_decode_i_64(arr[7]),
      isLong: dco_decode_bool(arr[8]),
      name: dco_decode_String(arr[9]),
      news: dco_decode_String(arr[10]),
      next: dco_decode_opt_String(arr[11]),
      ordered: dco_decode_i_64(arr[12]),
      prev: dco_decode_opt_String(arr[13]),
      size: dco_decode_i_64(arr[14]),
      typeField: dco_decode_i_64(arr[15]),
    );
  }

  @protected
  UIQueryDownloadComicGroup dco_decode_ui_query_download_comic_group(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UIQueryDownloadComicGroup(
      comicPathWord: dco_decode_String(arr[0]),
      groupPathWord: dco_decode_String(arr[1]),
      count: dco_decode_i_64(arr[2]),
      name: dco_decode_String(arr[3]),
      groupRank: dco_decode_i_64(arr[4]),
    );
  }

  @protected
  UIRankItem dco_decode_ui_rank_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UIRankItem(
      comic: dco_decode_ui_comic_in_list(arr[0]),
      dateType: dco_decode_i_64(arr[1]),
      popular: dco_decode_i_64(arr[2]),
      riseNum: dco_decode_i_64(arr[3]),
      riseSort: dco_decode_i_64(arr[4]),
      sort: dco_decode_i_64(arr[5]),
      sortLast: dco_decode_i_64(arr[6]),
    );
  }

  @protected
  UIRegisterResult dco_decode_ui_register_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UIRegisterResult(
      state: dco_decode_i_64(arr[0]),
      message: dco_decode_String(arr[1]),
      member: dco_decode_opt_box_autoadd_register_result(arr[2]),
    );
  }

  @protected
  UITags dco_decode_ui_tags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UITags(
      ordering: dco_decode_list_tag(arr[0]),
      theme: dco_decode_list_ui_theme(arr[1]),
      top: dco_decode_list_tag(arr[2]),
    );
  }

  @protected
  UITheme dco_decode_ui_theme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UITheme(
      count: dco_decode_i_64(arr[0]),
      initials: dco_decode_i_64(arr[1]),
      name: dco_decode_String(arr[2]),
      pathWord: dco_decode_String(arr[3]),
    );
  }

  @protected
  UIViewLog dco_decode_ui_view_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return UIViewLog(
      comicPathWord: dco_decode_String(arr[0]),
      comicName: dco_decode_String(arr[1]),
      comicAuthors: dco_decode_String(arr[2]),
      comicCover: dco_decode_String(arr[3]),
      chapterUuid: dco_decode_String(arr[4]),
      chapterName: dco_decode_String(arr[5]),
      chapterOrdered: dco_decode_i_64(arr[6]),
      chapterSize: dco_decode_i_64(arr[7]),
      chapterCount: dco_decode_i_64(arr[8]),
      pageRank: dco_decode_i_32(arr[9]),
      viewTime: dco_decode_i_64(arr[10]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Author sse_decode_author(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_alias = sse_decode_opt_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    return Author(name: var_name, alias: var_alias, pathWord: var_pathWord);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Browse sse_decode_box_autoadd_browse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  LastBrowse sse_decode_box_autoadd_last_browse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_last_browse(deserializer));
  }

  @protected
  MemberInfo sse_decode_box_autoadd_member_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_member_info(deserializer));
  }

  @protected
  RegisterResult sse_decode_box_autoadd_register_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_register_result(deserializer));
  }

  @protected
  UIQueryDownloadComic sse_decode_box_autoadd_ui_query_download_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_query_download_comic(deserializer));
  }

  @protected
  UIViewLog sse_decode_box_autoadd_ui_view_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_view_log(deserializer));
  }

  @protected
  Browse sse_decode_browse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chapterId = sse_decode_String(deserializer);
    var var_chapterName = sse_decode_String(deserializer);
    var var_chapterUuid = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_comicUuid = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    return Browse(
        chapterId: var_chapterId,
        chapterName: var_chapterName,
        chapterUuid: var_chapterUuid,
        comicId: var_comicId,
        comicUuid: var_comicUuid,
        pathWord: var_pathWord);
  }

  @protected
  BrowseComic sse_decode_browse_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_lastChapterId = sse_decode_String(deserializer);
    var var_lastChapterName = sse_decode_String(deserializer);
    var var_comic = sse_decode_browse_comic_comic(deserializer);
    return BrowseComic(
        id: var_id,
        lastChapterId: var_lastChapterId,
        lastChapterName: var_lastChapterName,
        comic: var_comic);
  }

  @protected
  BrowseComicComic sse_decode_browse_comic_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_String(deserializer);
    var var_bDisplay = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_females = sse_decode_list_sexual_orientation(deserializer);
    var var_males = sse_decode_list_sexual_orientation(deserializer);
    var var_author = sse_decode_list_author(deserializer);
    var var_theme = sse_decode_list_tag(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_status = sse_decode_i_64(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_datetimeUpdated = sse_decode_String(deserializer);
    var var_lastChapterId = sse_decode_String(deserializer);
    var var_lastChapterName = sse_decode_String(deserializer);
    return BrowseComicComic(
        uuid: var_uuid,
        bDisplay: var_bDisplay,
        name: var_name,
        pathWord: var_pathWord,
        females: var_females,
        males: var_males,
        author: var_author,
        theme: var_theme,
        cover: var_cover,
        status: var_status,
        popular: var_popular,
        datetimeUpdated: var_datetimeUpdated,
        lastChapterId: var_lastChapterId,
        lastChapterName: var_lastChapterName);
  }

  @protected
  ChapterComicInfo sse_decode_chapter_comic_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_restrict = sse_decode_classify_item(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    return ChapterComicInfo(
        name: var_name,
        pathWord: var_pathWord,
        restrict: var_restrict,
        uuid: var_uuid);
  }

  @protected
  ChapterImage sse_decode_chapter_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    return ChapterImage(url: var_url);
  }

  @protected
  ClassifyItem sse_decode_classify_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_display = sse_decode_String(deserializer);
    var var_value = sse_decode_i_64(deserializer);
    return ClassifyItem(display: var_display, value: var_value);
  }

  @protected
  CollectedComic sse_decode_collected_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_i_64(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_bFolder = sse_decode_bool(deserializer);
    var var_folderId = sse_decode_opt_String(deserializer);
    var var_lastBrowse = sse_decode_opt_box_autoadd_last_browse(deserializer);
    var var_comic = sse_decode_collected_comic_info(deserializer);
    return CollectedComic(
        uuid: var_uuid,
        name: var_name,
        bFolder: var_bFolder,
        folderId: var_folderId,
        lastBrowse: var_lastBrowse,
        comic: var_comic);
  }

  @protected
  CollectedComicInfo sse_decode_collected_comic_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_String(deserializer);
    var var_bDisplay = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_females = sse_decode_list_sexual_orientation(deserializer);
    var var_males = sse_decode_list_sexual_orientation(deserializer);
    var var_author = sse_decode_list_author(deserializer);
    var var_theme = sse_decode_list_tag(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_status = sse_decode_i_64(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_datetimeUpdated = sse_decode_String(deserializer);
    var var_lastChapterId = sse_decode_String(deserializer);
    var var_lastChapterName = sse_decode_String(deserializer);
    return CollectedComicInfo(
        uuid: var_uuid,
        bDisplay: var_bDisplay,
        name: var_name,
        pathWord: var_pathWord,
        females: var_females,
        males: var_males,
        author: var_author,
        theme: var_theme,
        cover: var_cover,
        status: var_status,
        popular: var_popular,
        datetimeUpdated: var_datetimeUpdated,
        lastChapterId: var_lastChapterId,
        lastChapterName: var_lastChapterName);
  }

  @protected
  CopyHeader sse_decode_copy_header(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return CopyHeader(key: var_key, value: var_value);
  }

  @protected
  ExportsType sse_decode_exports_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ExportsType.values[inner];
  }

  @protected
  Group sse_decode_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_count = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    return Group(count: var_count, name: var_name, pathWord: var_pathWord);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  LastBrowse sse_decode_last_browse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_lastBrowseId = sse_decode_String(deserializer);
    var var_lastBrowseName = sse_decode_String(deserializer);
    return LastBrowse(
        lastBrowseId: var_lastBrowseId, lastBrowseName: var_lastBrowseName);
  }

  @protected
  LastChapter sse_decode_last_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    return LastChapter(name: var_name, uuid: var_uuid);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Author> sse_decode_list_author(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Author>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_author(deserializer));
    }
    return ans_;
  }

  @protected
  List<BrowseComic> sse_decode_list_browse_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BrowseComic>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_browse_comic(deserializer));
    }
    return ans_;
  }

  @protected
  List<ChapterImage> sse_decode_list_chapter_image(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ChapterImage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_chapter_image(deserializer));
    }
    return ans_;
  }

  @protected
  List<CollectedComic> sse_decode_list_collected_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CollectedComic>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_collected_comic(deserializer));
    }
    return ans_;
  }

  @protected
  List<CopyHeader> sse_decode_list_copy_header(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CopyHeader>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_copy_header(deserializer));
    }
    return ans_;
  }

  @protected
  List<Group> sse_decode_list_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Group>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_group(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Roast> sse_decode_list_roast(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Roast>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_roast(deserializer));
    }
    return ans_;
  }

  @protected
  List<SexualOrientation> sse_decode_list_sexual_orientation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SexualOrientation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sexual_orientation(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tag> sse_decode_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIComicChapter> sse_decode_list_ui_comic_chapter(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIComicChapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_comic_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIComicInExplore> sse_decode_list_ui_comic_in_explore(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIComicInExplore>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_comic_in_explore(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIComicInList> sse_decode_list_ui_comic_in_list(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIComicInList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_comic_in_list(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIComment> sse_decode_list_ui_comment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIComment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_comment(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIDownloadComic> sse_decode_list_ui_download_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIDownloadComic>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_download_comic(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIDownloadComicChapter> sse_decode_list_ui_download_comic_chapter(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIDownloadComicChapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_download_comic_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIDownloadComicGroup> sse_decode_list_ui_download_comic_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIDownloadComicGroup>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_download_comic_group(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIDownloadComicPage> sse_decode_list_ui_download_comic_page(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIDownloadComicPage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_download_comic_page(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIQueryDownloadComicChapter>
      sse_decode_list_ui_query_download_comic_chapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIQueryDownloadComicChapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_query_download_comic_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIQueryDownloadComicGroup> sse_decode_list_ui_query_download_comic_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIQueryDownloadComicGroup>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_query_download_comic_group(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIRankItem> sse_decode_list_ui_rank_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIRankItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_rank_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<UITheme> sse_decode_list_ui_theme(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UITheme>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_theme(deserializer));
    }
    return ans_;
  }

  @protected
  List<UIViewLog> sse_decode_list_ui_view_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UIViewLog>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_view_log(deserializer));
    }
    return ans_;
  }

  @protected
  MemberInfo sse_decode_member_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_username = sse_decode_String(deserializer);
    var var_nickname = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_isAuthenticated = sse_decode_bool(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_bVerifyEmail = sse_decode_bool(deserializer);
    var var_email = sse_decode_opt_String(deserializer);
    var var_mobile = sse_decode_opt_String(deserializer);
    var var_mobileRegion = sse_decode_opt_String(deserializer);
    var var_point = sse_decode_i_64(deserializer);
    var var_comicVip = sse_decode_i_64(deserializer);
    var var_comicVipEnd = sse_decode_opt_String(deserializer);
    var var_comicVipStart = sse_decode_opt_String(deserializer);
    var var_cartoonVip = sse_decode_i_64(deserializer);
    var var_cartoonVipEnd = sse_decode_opt_String(deserializer);
    var var_cartoonVipStart = sse_decode_opt_String(deserializer);
    var var_adsVipEnd = sse_decode_opt_String(deserializer);
    var var_closeReport = sse_decode_bool(deserializer);
    var var_downloads = sse_decode_i_64(deserializer);
    var var_vipDownloads = sse_decode_i_64(deserializer);
    var var_rewardDownloads = sse_decode_i_64(deserializer);
    var var_inviteCode = sse_decode_opt_String(deserializer);
    var var_invited = sse_decode_opt_String(deserializer);
    var var_bSstv = sse_decode_bool(deserializer);
    var var_scyAnswer = sse_decode_bool(deserializer);
    var var_dayDownloadsRefresh = sse_decode_String(deserializer);
    var var_dayDownloads = sse_decode_i_64(deserializer);
    return MemberInfo(
        userId: var_userId,
        username: var_username,
        nickname: var_nickname,
        avatar: var_avatar,
        isAuthenticated: var_isAuthenticated,
        datetimeCreated: var_datetimeCreated,
        bVerifyEmail: var_bVerifyEmail,
        email: var_email,
        mobile: var_mobile,
        mobileRegion: var_mobileRegion,
        point: var_point,
        comicVip: var_comicVip,
        comicVipEnd: var_comicVipEnd,
        comicVipStart: var_comicVipStart,
        cartoonVip: var_cartoonVip,
        cartoonVipEnd: var_cartoonVipEnd,
        cartoonVipStart: var_cartoonVipStart,
        adsVipEnd: var_adsVipEnd,
        closeReport: var_closeReport,
        downloads: var_downloads,
        vipDownloads: var_vipDownloads,
        rewardDownloads: var_rewardDownloads,
        inviteCode: var_inviteCode,
        invited: var_invited,
        bSstv: var_bSstv,
        scyAnswer: var_scyAnswer,
        dayDownloadsRefresh: var_dayDownloadsRefresh,
        dayDownloads: var_dayDownloads);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Browse? sse_decode_opt_box_autoadd_browse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_browse(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LastBrowse? sse_decode_opt_box_autoadd_last_browse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_last_browse(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MemberInfo? sse_decode_opt_box_autoadd_member_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_member_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RegisterResult? sse_decode_opt_box_autoadd_register_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_register_result(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UIViewLog? sse_decode_opt_box_autoadd_ui_view_log(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_view_log(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RegisterResult sse_decode_register_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_token = sse_decode_opt_String(deserializer);
    var var_nickname = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_inviteCode = sse_decode_opt_String(deserializer);
    return RegisterResult(
        userId: var_userId,
        uuid: var_uuid,
        datetimeCreated: var_datetimeCreated,
        token: var_token,
        nickname: var_nickname,
        avatar: var_avatar,
        inviteCode: var_inviteCode);
  }

  @protected
  Roast sse_decode_roast(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_createAt = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_userName = sse_decode_String(deserializer);
    var var_userAvatar = sse_decode_String(deserializer);
    var var_comment = sse_decode_String(deserializer);
    return Roast(
        id: var_id,
        createAt: var_createAt,
        userId: var_userId,
        userName: var_userName,
        userAvatar: var_userAvatar,
        comment: var_comment);
  }

  @protected
  SexualOrientation sse_decode_sexual_orientation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_gender = sse_decode_i_64(deserializer);
    return SexualOrientation(
        name: var_name, pathWord: var_pathWord, gender: var_gender);
  }

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    return Tag(name: var_name, pathWord: var_pathWord);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UICacheImage sse_decode_ui_cache_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_absPath = sse_decode_String(deserializer);
    var var_cacheKey = sse_decode_String(deserializer);
    var var_cacheTime = sse_decode_i_64(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_useful = sse_decode_String(deserializer);
    var var_extendsFieldFirst = sse_decode_opt_String(deserializer);
    var var_extendsFieldSecond = sse_decode_opt_String(deserializer);
    var var_extendsFieldThird = sse_decode_opt_String(deserializer);
    var var_localPath = sse_decode_String(deserializer);
    var var_imageFormat = sse_decode_String(deserializer);
    var var_imageWidth = sse_decode_u_32(deserializer);
    var var_imageHeight = sse_decode_u_32(deserializer);
    return UICacheImage(
        absPath: var_absPath,
        cacheKey: var_cacheKey,
        cacheTime: var_cacheTime,
        url: var_url,
        useful: var_useful,
        extendsFieldFirst: var_extendsFieldFirst,
        extendsFieldSecond: var_extendsFieldSecond,
        extendsFieldThird: var_extendsFieldThird,
        localPath: var_localPath,
        imageFormat: var_imageFormat,
        imageWidth: var_imageWidth,
        imageHeight: var_imageHeight);
  }

  @protected
  UIChapterAndContents sse_decode_ui_chapter_and_contents(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicId = sse_decode_String(deserializer);
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_contents = sse_decode_list_chapter_image(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_index = sse_decode_i_64(deserializer);
    var var_isLong = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_news = sse_decode_String(deserializer);
    var var_next = sse_decode_opt_String(deserializer);
    var var_ordered = sse_decode_i_64(deserializer);
    var var_prev = sse_decode_opt_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_typeField = sse_decode_i_64(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_words = sse_decode_list_prim_i_64_strict(deserializer);
    return UIChapterAndContents(
        comicId: var_comicId,
        comicPathWord: var_comicPathWord,
        contents: var_contents,
        count: var_count,
        datetimeCreated: var_datetimeCreated,
        groupPathWord: var_groupPathWord,
        imgType: var_imgType,
        index: var_index,
        isLong: var_isLong,
        name: var_name,
        news: var_news,
        next: var_next,
        ordered: var_ordered,
        prev: var_prev,
        size: var_size,
        typeField: var_typeField,
        uuid: var_uuid,
        words: var_words);
  }

  @protected
  UIChapterData sse_decode_ui_chapter_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chapter = sse_decode_ui_chapter_and_contents(deserializer);
    var var_comic = sse_decode_chapter_comic_info(deserializer);
    var var_isLock = sse_decode_bool(deserializer);
    var var_isLogin = sse_decode_bool(deserializer);
    var var_isMobileBind = sse_decode_bool(deserializer);
    var var_isVip = sse_decode_bool(deserializer);
    var var_showApp = sse_decode_bool(deserializer);
    return UIChapterData(
        chapter: var_chapter,
        comic: var_comic,
        isLock: var_isLock,
        isLogin: var_isLogin,
        isMobileBind: var_isMobileBind,
        isVip: var_isVip,
        showApp: var_showApp);
  }

  @protected
  UIComic sse_decode_ui_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_alias = sse_decode_opt_String(deserializer);
    var var_author = sse_decode_list_author(deserializer);
    var var_b404 = sse_decode_bool(deserializer);
    var var_bHidden = sse_decode_bool(deserializer);
    var var_ban = sse_decode_i_64(deserializer);
    var var_brief = sse_decode_String(deserializer);
    var var_closeComment = sse_decode_bool(deserializer);
    var var_closeRoast = sse_decode_bool(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_datetimeUpdated = sse_decode_String(deserializer);
    var var_freeType = sse_decode_classify_item(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_lastChapter = sse_decode_last_chapter(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_reclass = sse_decode_classify_item(deserializer);
    var var_region = sse_decode_classify_item(deserializer);
    var var_restrict = sse_decode_classify_item(deserializer);
    var var_seoBaidu = sse_decode_String(deserializer);
    var var_status = sse_decode_classify_item(deserializer);
    var var_theme = sse_decode_list_tag(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_females = sse_decode_list_sexual_orientation(deserializer);
    var var_males = sse_decode_list_sexual_orientation(deserializer);
    return UIComic(
        alias: var_alias,
        author: var_author,
        b404: var_b404,
        bHidden: var_bHidden,
        ban: var_ban,
        brief: var_brief,
        closeComment: var_closeComment,
        closeRoast: var_closeRoast,
        cover: var_cover,
        datetimeUpdated: var_datetimeUpdated,
        freeType: var_freeType,
        imgType: var_imgType,
        lastChapter: var_lastChapter,
        name: var_name,
        pathWord: var_pathWord,
        popular: var_popular,
        reclass: var_reclass,
        region: var_region,
        restrict: var_restrict,
        seoBaidu: var_seoBaidu,
        status: var_status,
        theme: var_theme,
        uuid: var_uuid,
        females: var_females,
        males: var_males);
  }

  @protected
  UIComicChapter sse_decode_ui_comic_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicId = sse_decode_String(deserializer);
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_index = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_news = sse_decode_String(deserializer);
    var var_next = sse_decode_opt_String(deserializer);
    var var_ordered = sse_decode_i_64(deserializer);
    var var_prev = sse_decode_opt_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_typeField = sse_decode_i_64(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    return UIComicChapter(
        comicId: var_comicId,
        comicPathWord: var_comicPathWord,
        count: var_count,
        datetimeCreated: var_datetimeCreated,
        groupPathWord: var_groupPathWord,
        imgType: var_imgType,
        index: var_index,
        name: var_name,
        news: var_news,
        next: var_next,
        ordered: var_ordered,
        prev: var_prev,
        size: var_size,
        typeField: var_typeField,
        uuid: var_uuid);
  }

  @protected
  UIComicData sse_decode_ui_comic_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comic = sse_decode_ui_comic(deserializer);
    var var_groups = sse_decode_list_group(deserializer);
    var var_isLock = sse_decode_bool(deserializer);
    var var_isLogin = sse_decode_bool(deserializer);
    var var_isMobileBind = sse_decode_bool(deserializer);
    var var_isVip = sse_decode_bool(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    return UIComicData(
        comic: var_comic,
        groups: var_groups,
        isLock: var_isLock,
        isLogin: var_isLogin,
        isMobileBind: var_isMobileBind,
        isVip: var_isVip,
        popular: var_popular);
  }

  @protected
  UIComicInExplore sse_decode_ui_comic_in_explore(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_freeType = sse_decode_classify_item(deserializer);
    var var_author = sse_decode_list_author(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_datetimeUpdated = sse_decode_opt_String(deserializer);
    var var_females = sse_decode_list_sexual_orientation(deserializer);
    var var_males = sse_decode_list_sexual_orientation(deserializer);
    return UIComicInExplore(
        name: var_name,
        pathWord: var_pathWord,
        freeType: var_freeType,
        author: var_author,
        cover: var_cover,
        popular: var_popular,
        datetimeUpdated: var_datetimeUpdated,
        females: var_females,
        males: var_males);
  }

  @protected
  UIComicInList sse_decode_ui_comic_in_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_author = sse_decode_list_author(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_females = sse_decode_list_sexual_orientation(deserializer);
    var var_males = sse_decode_list_sexual_orientation(deserializer);
    return UIComicInList(
        author: var_author,
        cover: var_cover,
        imgType: var_imgType,
        name: var_name,
        pathWord: var_pathWord,
        popular: var_popular,
        females: var_females,
        males: var_males);
  }

  @protected
  UIComicQuery sse_decode_ui_comic_query(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_browse = sse_decode_opt_box_autoadd_browse(deserializer);
    var var_collect = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_isLock = sse_decode_bool(deserializer);
    var var_isLogin = sse_decode_bool(deserializer);
    var var_isMobileBind = sse_decode_bool(deserializer);
    var var_isVip = sse_decode_bool(deserializer);
    return UIComicQuery(
        browse: var_browse,
        collect: var_collect,
        isLock: var_isLock,
        isLogin: var_isLogin,
        isMobileBind: var_isMobileBind,
        isVip: var_isVip);
  }

  @protected
  UIComment sse_decode_ui_comment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_createAt = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_userName = sse_decode_String(deserializer);
    var var_userAvatar = sse_decode_String(deserializer);
    var var_comment = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_parentId = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_parentUserId = sse_decode_opt_String(deserializer);
    var var_parentUserName = sse_decode_opt_String(deserializer);
    return UIComment(
        id: var_id,
        createAt: var_createAt,
        userId: var_userId,
        userName: var_userName,
        userAvatar: var_userAvatar,
        comment: var_comment,
        count: var_count,
        parentId: var_parentId,
        parentUserId: var_parentUserId,
        parentUserName: var_parentUserName);
  }

  @protected
  UIDownloadComic sse_decode_ui_download_comic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pathWord = sse_decode_String(deserializer);
    var var_alias = sse_decode_opt_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_b404 = sse_decode_bool(deserializer);
    var var_bHidden = sse_decode_bool(deserializer);
    var var_ban = sse_decode_i_64(deserializer);
    var var_brief = sse_decode_String(deserializer);
    var var_closeComment = sse_decode_bool(deserializer);
    var var_closeRoast = sse_decode_bool(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_datetimeUpdated = sse_decode_String(deserializer);
    var var_females = sse_decode_String(deserializer);
    var var_freeType = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_males = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_reclass = sse_decode_String(deserializer);
    var var_region = sse_decode_String(deserializer);
    var var_restrict = sse_decode_String(deserializer);
    var var_seoBaidu = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_theme = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_coverCacheKey = sse_decode_String(deserializer);
    var var_coverDownloadStatus = sse_decode_i_64(deserializer);
    var var_coverFormat = sse_decode_String(deserializer);
    var var_coverWidth = sse_decode_u_32(deserializer);
    var var_coverHeight = sse_decode_u_32(deserializer);
    var var_imageCount = sse_decode_i_64(deserializer);
    var var_imageCountSuccess = sse_decode_i_64(deserializer);
    var var_downloadStatus = sse_decode_i_64(deserializer);
    return UIDownloadComic(
        pathWord: var_pathWord,
        alias: var_alias,
        author: var_author,
        b404: var_b404,
        bHidden: var_bHidden,
        ban: var_ban,
        brief: var_brief,
        closeComment: var_closeComment,
        closeRoast: var_closeRoast,
        cover: var_cover,
        datetimeUpdated: var_datetimeUpdated,
        females: var_females,
        freeType: var_freeType,
        imgType: var_imgType,
        males: var_males,
        name: var_name,
        popular: var_popular,
        reclass: var_reclass,
        region: var_region,
        restrict: var_restrict,
        seoBaidu: var_seoBaidu,
        status: var_status,
        theme: var_theme,
        uuid: var_uuid,
        coverCacheKey: var_coverCacheKey,
        coverDownloadStatus: var_coverDownloadStatus,
        coverFormat: var_coverFormat,
        coverWidth: var_coverWidth,
        coverHeight: var_coverHeight,
        imageCount: var_imageCount,
        imageCountSuccess: var_imageCountSuccess,
        downloadStatus: var_downloadStatus);
  }

  @protected
  UIDownloadComicChapter sse_decode_ui_download_comic_chapter(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_index = sse_decode_i_64(deserializer);
    var var_isLong = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_news = sse_decode_String(deserializer);
    var var_next = sse_decode_opt_String(deserializer);
    var var_ordered = sse_decode_i_64(deserializer);
    var var_prev = sse_decode_opt_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_typeField = sse_decode_i_64(deserializer);
    var var_downloadStatus = sse_decode_i_64(deserializer);
    return UIDownloadComicChapter(
        comicPathWord: var_comicPathWord,
        uuid: var_uuid,
        comicId: var_comicId,
        count: var_count,
        datetimeCreated: var_datetimeCreated,
        groupPathWord: var_groupPathWord,
        imgType: var_imgType,
        index: var_index,
        isLong: var_isLong,
        name: var_name,
        news: var_news,
        next: var_next,
        ordered: var_ordered,
        prev: var_prev,
        size: var_size,
        typeField: var_typeField,
        downloadStatus: var_downloadStatus);
  }

  @protected
  UIDownloadComicGroup sse_decode_ui_download_comic_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_groupRank = sse_decode_i_64(deserializer);
    return UIDownloadComicGroup(
        comicPathWord: var_comicPathWord,
        groupPathWord: var_groupPathWord,
        count: var_count,
        name: var_name,
        groupRank: var_groupRank);
  }

  @protected
  UIDownloadComicPage sse_decode_ui_download_comic_page(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_chapterUuid = sse_decode_String(deserializer);
    var var_imageIndex = sse_decode_i_32(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_cacheKey = sse_decode_String(deserializer);
    var var_downloadStatus = sse_decode_i_64(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_format = sse_decode_String(deserializer);
    return UIDownloadComicPage(
        comicPathWord: var_comicPathWord,
        chapterUuid: var_chapterUuid,
        imageIndex: var_imageIndex,
        url: var_url,
        cacheKey: var_cacheKey,
        downloadStatus: var_downloadStatus,
        width: var_width,
        height: var_height,
        format: var_format);
  }

  @protected
  UILoginState sse_decode_ui_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_state = sse_decode_i_64(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_member = sse_decode_opt_box_autoadd_member_info(deserializer);
    return UILoginState(
        state: var_state, message: var_message, member: var_member);
  }

  @protected
  UIPageBrowseComic sse_decode_ui_page_browse_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_browse_comic(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageBrowseComic(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageCollectedComic sse_decode_ui_page_collected_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_collected_comic(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageCollectedComic(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageComicChapter sse_decode_ui_page_comic_chapter(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_comic_chapter(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageComicChapter(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageComicInExplore sse_decode_ui_page_comic_in_explore(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_comic_in_explore(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageComicInExplore(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageComment sse_decode_ui_page_comment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_comment(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageComment(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageRankItem sse_decode_ui_page_rank_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_rank_item(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageRankItem(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageUIComicInList sse_decode_ui_page_ui_comic_in_list(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_comic_in_list(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageUIComicInList(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIPageUIViewLog sse_decode_ui_page_ui_view_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_ui_view_log(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return UIPageUIViewLog(
        list: var_list, total: var_total, limit: var_limit, offset: var_offset);
  }

  @protected
  UIQueryDownloadComic sse_decode_ui_query_download_comic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pathWord = sse_decode_String(deserializer);
    var var_alias = sse_decode_opt_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_b404 = sse_decode_bool(deserializer);
    var var_bHidden = sse_decode_bool(deserializer);
    var var_ban = sse_decode_i_64(deserializer);
    var var_brief = sse_decode_String(deserializer);
    var var_closeComment = sse_decode_bool(deserializer);
    var var_closeRoast = sse_decode_bool(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_datetimeUpdated = sse_decode_String(deserializer);
    var var_females = sse_decode_String(deserializer);
    var var_freeType = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_males = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_reclass = sse_decode_String(deserializer);
    var var_region = sse_decode_String(deserializer);
    var var_restrict1 = sse_decode_String(deserializer);
    var var_seoBaidu = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_theme = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_groups =
        sse_decode_list_ui_query_download_comic_group(deserializer);
    var var_chapters =
        sse_decode_list_ui_query_download_comic_chapter(deserializer);
    return UIQueryDownloadComic(
        pathWord: var_pathWord,
        alias: var_alias,
        author: var_author,
        b404: var_b404,
        bHidden: var_bHidden,
        ban: var_ban,
        brief: var_brief,
        closeComment: var_closeComment,
        closeRoast: var_closeRoast,
        cover: var_cover,
        datetimeUpdated: var_datetimeUpdated,
        females: var_females,
        freeType: var_freeType,
        imgType: var_imgType,
        males: var_males,
        name: var_name,
        popular: var_popular,
        reclass: var_reclass,
        region: var_region,
        restrict1: var_restrict1,
        seoBaidu: var_seoBaidu,
        status: var_status,
        theme: var_theme,
        uuid: var_uuid,
        groups: var_groups,
        chapters: var_chapters);
  }

  @protected
  UIQueryDownloadComicChapter sse_decode_ui_query_download_comic_chapter(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_datetimeCreated = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_imgType = sse_decode_i_64(deserializer);
    var var_index = sse_decode_i_64(deserializer);
    var var_isLong = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_news = sse_decode_String(deserializer);
    var var_next = sse_decode_opt_String(deserializer);
    var var_ordered = sse_decode_i_64(deserializer);
    var var_prev = sse_decode_opt_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_typeField = sse_decode_i_64(deserializer);
    return UIQueryDownloadComicChapter(
        comicPathWord: var_comicPathWord,
        uuid: var_uuid,
        comicId: var_comicId,
        count: var_count,
        datetimeCreated: var_datetimeCreated,
        groupPathWord: var_groupPathWord,
        imgType: var_imgType,
        index: var_index,
        isLong: var_isLong,
        name: var_name,
        news: var_news,
        next: var_next,
        ordered: var_ordered,
        prev: var_prev,
        size: var_size,
        typeField: var_typeField);
  }

  @protected
  UIQueryDownloadComicGroup sse_decode_ui_query_download_comic_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_groupPathWord = sse_decode_String(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_groupRank = sse_decode_i_64(deserializer);
    return UIQueryDownloadComicGroup(
        comicPathWord: var_comicPathWord,
        groupPathWord: var_groupPathWord,
        count: var_count,
        name: var_name,
        groupRank: var_groupRank);
  }

  @protected
  UIRankItem sse_decode_ui_rank_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comic = sse_decode_ui_comic_in_list(deserializer);
    var var_dateType = sse_decode_i_64(deserializer);
    var var_popular = sse_decode_i_64(deserializer);
    var var_riseNum = sse_decode_i_64(deserializer);
    var var_riseSort = sse_decode_i_64(deserializer);
    var var_sort = sse_decode_i_64(deserializer);
    var var_sortLast = sse_decode_i_64(deserializer);
    return UIRankItem(
        comic: var_comic,
        dateType: var_dateType,
        popular: var_popular,
        riseNum: var_riseNum,
        riseSort: var_riseSort,
        sort: var_sort,
        sortLast: var_sortLast);
  }

  @protected
  UIRegisterResult sse_decode_ui_register_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_state = sse_decode_i_64(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_member = sse_decode_opt_box_autoadd_register_result(deserializer);
    return UIRegisterResult(
        state: var_state, message: var_message, member: var_member);
  }

  @protected
  UITags sse_decode_ui_tags(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ordering = sse_decode_list_tag(deserializer);
    var var_theme = sse_decode_list_ui_theme(deserializer);
    var var_top = sse_decode_list_tag(deserializer);
    return UITags(ordering: var_ordering, theme: var_theme, top: var_top);
  }

  @protected
  UITheme sse_decode_ui_theme(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_count = sse_decode_i_64(deserializer);
    var var_initials = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_pathWord = sse_decode_String(deserializer);
    return UITheme(
        count: var_count,
        initials: var_initials,
        name: var_name,
        pathWord: var_pathWord);
  }

  @protected
  UIViewLog sse_decode_ui_view_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_comicPathWord = sse_decode_String(deserializer);
    var var_comicName = sse_decode_String(deserializer);
    var var_comicAuthors = sse_decode_String(deserializer);
    var var_comicCover = sse_decode_String(deserializer);
    var var_chapterUuid = sse_decode_String(deserializer);
    var var_chapterName = sse_decode_String(deserializer);
    var var_chapterOrdered = sse_decode_i_64(deserializer);
    var var_chapterSize = sse_decode_i_64(deserializer);
    var var_chapterCount = sse_decode_i_64(deserializer);
    var var_pageRank = sse_decode_i_32(deserializer);
    var var_viewTime = sse_decode_i_64(deserializer);
    return UIViewLog(
        comicPathWord: var_comicPathWord,
        comicName: var_comicName,
        comicAuthors: var_comicAuthors,
        comicCover: var_comicCover,
        chapterUuid: var_chapterUuid,
        chapterName: var_chapterName,
        chapterOrdered: var_chapterOrdered,
        chapterSize: var_chapterSize,
        chapterCount: var_chapterCount,
        pageRank: var_pageRank,
        viewTime: var_viewTime);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_author(Author self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.alias, serializer);
    sse_encode_String(self.pathWord, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_browse(Browse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_last_browse(
      LastBrowse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_last_browse(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_member_info(
      MemberInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_member_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_register_result(
      RegisterResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_register_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_query_download_comic(
      UIQueryDownloadComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_query_download_comic(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_view_log(
      UIViewLog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_view_log(self, serializer);
  }

  @protected
  void sse_encode_browse(Browse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.chapterId, serializer);
    sse_encode_String(self.chapterName, serializer);
    sse_encode_String(self.chapterUuid, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.comicUuid, serializer);
    sse_encode_String(self.pathWord, serializer);
  }

  @protected
  void sse_encode_browse_comic(BrowseComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.lastChapterId, serializer);
    sse_encode_String(self.lastChapterName, serializer);
    sse_encode_browse_comic_comic(self.comic, serializer);
  }

  @protected
  void sse_encode_browse_comic_comic(
      BrowseComicComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.uuid, serializer);
    sse_encode_bool(self.bDisplay, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_list_sexual_orientation(self.females, serializer);
    sse_encode_list_sexual_orientation(self.males, serializer);
    sse_encode_list_author(self.author, serializer);
    sse_encode_list_tag(self.theme, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_i_64(self.status, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_String(self.datetimeUpdated, serializer);
    sse_encode_String(self.lastChapterId, serializer);
    sse_encode_String(self.lastChapterName, serializer);
  }

  @protected
  void sse_encode_chapter_comic_info(
      ChapterComicInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_classify_item(self.restrict, serializer);
    sse_encode_String(self.uuid, serializer);
  }

  @protected
  void sse_encode_chapter_image(ChapterImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_classify_item(ClassifyItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.display, serializer);
    sse_encode_i_64(self.value, serializer);
  }

  @protected
  void sse_encode_collected_comic(
      CollectedComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.uuid, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_bool(self.bFolder, serializer);
    sse_encode_opt_String(self.folderId, serializer);
    sse_encode_opt_box_autoadd_last_browse(self.lastBrowse, serializer);
    sse_encode_collected_comic_info(self.comic, serializer);
  }

  @protected
  void sse_encode_collected_comic_info(
      CollectedComicInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.uuid, serializer);
    sse_encode_bool(self.bDisplay, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_list_sexual_orientation(self.females, serializer);
    sse_encode_list_sexual_orientation(self.males, serializer);
    sse_encode_list_author(self.author, serializer);
    sse_encode_list_tag(self.theme, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_i_64(self.status, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_String(self.datetimeUpdated, serializer);
    sse_encode_String(self.lastChapterId, serializer);
    sse_encode_String(self.lastChapterName, serializer);
  }

  @protected
  void sse_encode_copy_header(CopyHeader self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_exports_type(ExportsType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_group(Group self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_last_browse(LastBrowse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.lastBrowseId, serializer);
    sse_encode_String(self.lastBrowseName, serializer);
  }

  @protected
  void sse_encode_last_chapter(LastChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.uuid, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_author(List<Author> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_author(item, serializer);
    }
  }

  @protected
  void sse_encode_list_browse_comic(
      List<BrowseComic> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_browse_comic(item, serializer);
    }
  }

  @protected
  void sse_encode_list_chapter_image(
      List<ChapterImage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_chapter_image(item, serializer);
    }
  }

  @protected
  void sse_encode_list_collected_comic(
      List<CollectedComic> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_collected_comic(item, serializer);
    }
  }

  @protected
  void sse_encode_list_copy_header(
      List<CopyHeader> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_copy_header(item, serializer);
    }
  }

  @protected
  void sse_encode_list_group(List<Group> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_roast(List<Roast> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_roast(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sexual_orientation(
      List<SexualOrientation> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sexual_orientation(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tag(List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_comic_chapter(
      List<UIComicChapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_comic_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_comic_in_explore(
      List<UIComicInExplore> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_comic_in_explore(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_comic_in_list(
      List<UIComicInList> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_comic_in_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_comment(
      List<UIComment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_comment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_download_comic(
      List<UIDownloadComic> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_download_comic(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_download_comic_chapter(
      List<UIDownloadComicChapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_download_comic_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_download_comic_group(
      List<UIDownloadComicGroup> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_download_comic_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_download_comic_page(
      List<UIDownloadComicPage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_download_comic_page(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_query_download_comic_chapter(
      List<UIQueryDownloadComicChapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_query_download_comic_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_query_download_comic_group(
      List<UIQueryDownloadComicGroup> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_query_download_comic_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_rank_item(
      List<UIRankItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_rank_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_theme(List<UITheme> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_theme(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_view_log(
      List<UIViewLog> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_view_log(item, serializer);
    }
  }

  @protected
  void sse_encode_member_info(MemberInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.nickname, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_bool(self.isAuthenticated, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_bool(self.bVerifyEmail, serializer);
    sse_encode_opt_String(self.email, serializer);
    sse_encode_opt_String(self.mobile, serializer);
    sse_encode_opt_String(self.mobileRegion, serializer);
    sse_encode_i_64(self.point, serializer);
    sse_encode_i_64(self.comicVip, serializer);
    sse_encode_opt_String(self.comicVipEnd, serializer);
    sse_encode_opt_String(self.comicVipStart, serializer);
    sse_encode_i_64(self.cartoonVip, serializer);
    sse_encode_opt_String(self.cartoonVipEnd, serializer);
    sse_encode_opt_String(self.cartoonVipStart, serializer);
    sse_encode_opt_String(self.adsVipEnd, serializer);
    sse_encode_bool(self.closeReport, serializer);
    sse_encode_i_64(self.downloads, serializer);
    sse_encode_i_64(self.vipDownloads, serializer);
    sse_encode_i_64(self.rewardDownloads, serializer);
    sse_encode_opt_String(self.inviteCode, serializer);
    sse_encode_opt_String(self.invited, serializer);
    sse_encode_bool(self.bSstv, serializer);
    sse_encode_bool(self.scyAnswer, serializer);
    sse_encode_String(self.dayDownloadsRefresh, serializer);
    sse_encode_i_64(self.dayDownloads, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_browse(
      Browse? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_browse(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_last_browse(
      LastBrowse? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_last_browse(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_member_info(
      MemberInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_member_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_register_result(
      RegisterResult? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_register_result(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_view_log(
      UIViewLog? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_view_log(self, serializer);
    }
  }

  @protected
  void sse_encode_register_result(
      RegisterResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_opt_String(self.token, serializer);
    sse_encode_String(self.nickname, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_opt_String(self.inviteCode, serializer);
  }

  @protected
  void sse_encode_roast(Roast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.createAt, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.userName, serializer);
    sse_encode_String(self.userAvatar, serializer);
    sse_encode_String(self.comment, serializer);
  }

  @protected
  void sse_encode_sexual_orientation(
      SexualOrientation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_i_64(self.gender, serializer);
  }

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_ui_cache_image(UICacheImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.absPath, serializer);
    sse_encode_String(self.cacheKey, serializer);
    sse_encode_i_64(self.cacheTime, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.useful, serializer);
    sse_encode_opt_String(self.extendsFieldFirst, serializer);
    sse_encode_opt_String(self.extendsFieldSecond, serializer);
    sse_encode_opt_String(self.extendsFieldThird, serializer);
    sse_encode_String(self.localPath, serializer);
    sse_encode_String(self.imageFormat, serializer);
    sse_encode_u_32(self.imageWidth, serializer);
    sse_encode_u_32(self.imageHeight, serializer);
  }

  @protected
  void sse_encode_ui_chapter_and_contents(
      UIChapterAndContents self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_list_chapter_image(self.contents, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_i_64(self.index, serializer);
    sse_encode_bool(self.isLong, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.news, serializer);
    sse_encode_opt_String(self.next, serializer);
    sse_encode_i_64(self.ordered, serializer);
    sse_encode_opt_String(self.prev, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_i_64(self.typeField, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_list_prim_i_64_strict(self.words, serializer);
  }

  @protected
  void sse_encode_ui_chapter_data(
      UIChapterData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_chapter_and_contents(self.chapter, serializer);
    sse_encode_chapter_comic_info(self.comic, serializer);
    sse_encode_bool(self.isLock, serializer);
    sse_encode_bool(self.isLogin, serializer);
    sse_encode_bool(self.isMobileBind, serializer);
    sse_encode_bool(self.isVip, serializer);
    sse_encode_bool(self.showApp, serializer);
  }

  @protected
  void sse_encode_ui_comic(UIComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.alias, serializer);
    sse_encode_list_author(self.author, serializer);
    sse_encode_bool(self.b404, serializer);
    sse_encode_bool(self.bHidden, serializer);
    sse_encode_i_64(self.ban, serializer);
    sse_encode_String(self.brief, serializer);
    sse_encode_bool(self.closeComment, serializer);
    sse_encode_bool(self.closeRoast, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_String(self.datetimeUpdated, serializer);
    sse_encode_classify_item(self.freeType, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_last_chapter(self.lastChapter, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_classify_item(self.reclass, serializer);
    sse_encode_classify_item(self.region, serializer);
    sse_encode_classify_item(self.restrict, serializer);
    sse_encode_String(self.seoBaidu, serializer);
    sse_encode_classify_item(self.status, serializer);
    sse_encode_list_tag(self.theme, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_list_sexual_orientation(self.females, serializer);
    sse_encode_list_sexual_orientation(self.males, serializer);
  }

  @protected
  void sse_encode_ui_comic_chapter(
      UIComicChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_i_64(self.index, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.news, serializer);
    sse_encode_opt_String(self.next, serializer);
    sse_encode_i_64(self.ordered, serializer);
    sse_encode_opt_String(self.prev, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_i_64(self.typeField, serializer);
    sse_encode_String(self.uuid, serializer);
  }

  @protected
  void sse_encode_ui_comic_data(UIComicData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_comic(self.comic, serializer);
    sse_encode_list_group(self.groups, serializer);
    sse_encode_bool(self.isLock, serializer);
    sse_encode_bool(self.isLogin, serializer);
    sse_encode_bool(self.isMobileBind, serializer);
    sse_encode_bool(self.isVip, serializer);
    sse_encode_i_64(self.popular, serializer);
  }

  @protected
  void sse_encode_ui_comic_in_explore(
      UIComicInExplore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_classify_item(self.freeType, serializer);
    sse_encode_list_author(self.author, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_opt_String(self.datetimeUpdated, serializer);
    sse_encode_list_sexual_orientation(self.females, serializer);
    sse_encode_list_sexual_orientation(self.males, serializer);
  }

  @protected
  void sse_encode_ui_comic_in_list(
      UIComicInList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_author(self.author, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_list_sexual_orientation(self.females, serializer);
    sse_encode_list_sexual_orientation(self.males, serializer);
  }

  @protected
  void sse_encode_ui_comic_query(UIComicQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_browse(self.browse, serializer);
    sse_encode_opt_box_autoadd_i_64(self.collect, serializer);
    sse_encode_bool(self.isLock, serializer);
    sse_encode_bool(self.isLogin, serializer);
    sse_encode_bool(self.isMobileBind, serializer);
    sse_encode_bool(self.isVip, serializer);
  }

  @protected
  void sse_encode_ui_comment(UIComment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.createAt, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.userName, serializer);
    sse_encode_String(self.userAvatar, serializer);
    sse_encode_String(self.comment, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_opt_box_autoadd_i_64(self.parentId, serializer);
    sse_encode_opt_String(self.parentUserId, serializer);
    sse_encode_opt_String(self.parentUserName, serializer);
  }

  @protected
  void sse_encode_ui_download_comic(
      UIDownloadComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pathWord, serializer);
    sse_encode_opt_String(self.alias, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_bool(self.b404, serializer);
    sse_encode_bool(self.bHidden, serializer);
    sse_encode_i_64(self.ban, serializer);
    sse_encode_String(self.brief, serializer);
    sse_encode_bool(self.closeComment, serializer);
    sse_encode_bool(self.closeRoast, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_String(self.datetimeUpdated, serializer);
    sse_encode_String(self.females, serializer);
    sse_encode_String(self.freeType, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_String(self.males, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_String(self.reclass, serializer);
    sse_encode_String(self.region, serializer);
    sse_encode_String(self.restrict, serializer);
    sse_encode_String(self.seoBaidu, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.theme, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.coverCacheKey, serializer);
    sse_encode_i_64(self.coverDownloadStatus, serializer);
    sse_encode_String(self.coverFormat, serializer);
    sse_encode_u_32(self.coverWidth, serializer);
    sse_encode_u_32(self.coverHeight, serializer);
    sse_encode_i_64(self.imageCount, serializer);
    sse_encode_i_64(self.imageCountSuccess, serializer);
    sse_encode_i_64(self.downloadStatus, serializer);
  }

  @protected
  void sse_encode_ui_download_comic_chapter(
      UIDownloadComicChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_i_64(self.index, serializer);
    sse_encode_bool(self.isLong, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.news, serializer);
    sse_encode_opt_String(self.next, serializer);
    sse_encode_i_64(self.ordered, serializer);
    sse_encode_opt_String(self.prev, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_i_64(self.typeField, serializer);
    sse_encode_i_64(self.downloadStatus, serializer);
  }

  @protected
  void sse_encode_ui_download_comic_group(
      UIDownloadComicGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_i_64(self.groupRank, serializer);
  }

  @protected
  void sse_encode_ui_download_comic_page(
      UIDownloadComicPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.chapterUuid, serializer);
    sse_encode_i_32(self.imageIndex, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.cacheKey, serializer);
    sse_encode_i_64(self.downloadStatus, serializer);
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_String(self.format, serializer);
  }

  @protected
  void sse_encode_ui_login_state(UILoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.state, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_box_autoadd_member_info(self.member, serializer);
  }

  @protected
  void sse_encode_ui_page_browse_comic(
      UIPageBrowseComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_browse_comic(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_collected_comic(
      UIPageCollectedComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_collected_comic(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_comic_chapter(
      UIPageComicChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_comic_chapter(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_comic_in_explore(
      UIPageComicInExplore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_comic_in_explore(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_comment(
      UIPageComment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_comment(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_rank_item(
      UIPageRankItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_rank_item(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_ui_comic_in_list(
      UIPageUIComicInList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_comic_in_list(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_page_ui_view_log(
      UIPageUIViewLog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_view_log(self.list, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_ui_query_download_comic(
      UIQueryDownloadComic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pathWord, serializer);
    sse_encode_opt_String(self.alias, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_bool(self.b404, serializer);
    sse_encode_bool(self.bHidden, serializer);
    sse_encode_i_64(self.ban, serializer);
    sse_encode_String(self.brief, serializer);
    sse_encode_bool(self.closeComment, serializer);
    sse_encode_bool(self.closeRoast, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_String(self.datetimeUpdated, serializer);
    sse_encode_String(self.females, serializer);
    sse_encode_String(self.freeType, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_String(self.males, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_String(self.reclass, serializer);
    sse_encode_String(self.region, serializer);
    sse_encode_String(self.restrict1, serializer);
    sse_encode_String(self.seoBaidu, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.theme, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_list_ui_query_download_comic_group(self.groups, serializer);
    sse_encode_list_ui_query_download_comic_chapter(self.chapters, serializer);
  }

  @protected
  void sse_encode_ui_query_download_comic_chapter(
      UIQueryDownloadComicChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.datetimeCreated, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.imgType, serializer);
    sse_encode_i_64(self.index, serializer);
    sse_encode_bool(self.isLong, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.news, serializer);
    sse_encode_opt_String(self.next, serializer);
    sse_encode_i_64(self.ordered, serializer);
    sse_encode_opt_String(self.prev, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_i_64(self.typeField, serializer);
  }

  @protected
  void sse_encode_ui_query_download_comic_group(
      UIQueryDownloadComicGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.groupPathWord, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_i_64(self.groupRank, serializer);
  }

  @protected
  void sse_encode_ui_rank_item(UIRankItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_comic_in_list(self.comic, serializer);
    sse_encode_i_64(self.dateType, serializer);
    sse_encode_i_64(self.popular, serializer);
    sse_encode_i_64(self.riseNum, serializer);
    sse_encode_i_64(self.riseSort, serializer);
    sse_encode_i_64(self.sort, serializer);
    sse_encode_i_64(self.sortLast, serializer);
  }

  @protected
  void sse_encode_ui_register_result(
      UIRegisterResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.state, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_box_autoadd_register_result(self.member, serializer);
  }

  @protected
  void sse_encode_ui_tags(UITags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_tag(self.ordering, serializer);
    sse_encode_list_ui_theme(self.theme, serializer);
    sse_encode_list_tag(self.top, serializer);
  }

  @protected
  void sse_encode_ui_theme(UITheme self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.count, serializer);
    sse_encode_i_64(self.initials, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.pathWord, serializer);
  }

  @protected
  void sse_encode_ui_view_log(UIViewLog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.comicPathWord, serializer);
    sse_encode_String(self.comicName, serializer);
    sse_encode_String(self.comicAuthors, serializer);
    sse_encode_String(self.comicCover, serializer);
    sse_encode_String(self.chapterUuid, serializer);
    sse_encode_String(self.chapterName, serializer);
    sse_encode_i_64(self.chapterOrdered, serializer);
    sse_encode_i_64(self.chapterSize, serializer);
    sse_encode_i_64(self.chapterCount, serializer);
    sse_encode_i_32(self.pageRank, serializer);
    sse_encode_i_64(self.viewTime, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
