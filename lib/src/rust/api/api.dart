// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../copy_client/client.dart';
import '../copy_client/dtos.dart';
import '../frb_generated.dart';
import '../udto.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `block_on`, `clean_image`, `clean_web`, `collect_to_account_move`, `http_get_inner`, `member_from_result`

Future<void> init({required String root}) =>
    RustLib.instance.api.crateApiApiInit(root: root);

Future<void> saveProperty({required String k, required String v}) =>
    RustLib.instance.api.crateApiApiSaveProperty(k: k, v: v);

Future<String> loadProperty({required String k}) =>
    RustLib.instance.api.crateApiApiLoadProperty(k: k);

Future<String> getProxy() => RustLib.instance.api.crateApiApiGetProxy();

Future<void> setProxy({required String proxy}) =>
    RustLib.instance.api.crateApiApiSetProxy(proxy: proxy);

Future<void> setHeader({required String key, required String value}) =>
    RustLib.instance.api.crateApiApiSetHeader(key: key, value: value);

Future<String?> getHeader({required String key}) =>
    RustLib.instance.api.crateApiApiGetHeader(key: key);

Future<void> deleteHeader({required List<String> keys}) =>
    RustLib.instance.api.crateApiApiDeleteHeader(keys: keys);

Future<void> setHeaders({required List<CopyHeader> headers}) =>
    RustLib.instance.api.crateApiApiSetHeaders(headers: headers);

Future<List<CopyHeader>> getAllHeaders() =>
    RustLib.instance.api.crateApiApiGetAllHeaders();

Future<UILoginState> initLoginState() =>
    RustLib.instance.api.crateApiApiInitLoginState();

Future<UILoginState> login(
        {required String username, required String password}) =>
    RustLib.instance.api
        .crateApiApiLogin(username: username, password: password);

Future<UIRegisterResult> register(
        {required String username, required String password}) =>
    RustLib.instance.api
        .crateApiApiRegister(username: username, password: password);

Future<UIPageRankItem> rank(
        {required String dateType,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api
        .crateApiApiRank(dateType: dateType, offset: offset, limit: limit);

Future<UIPageUIComicInList> recommends(
        {required BigInt offset, required BigInt limit}) =>
    RustLib.instance.api.crateApiApiRecommends(offset: offset, limit: limit);

Future<UIComicData> comic({required String pathWord}) =>
    RustLib.instance.api.crateApiApiComic(pathWord: pathWord);

Future<UIPageComicChapter> comicChapters(
        {required String comicPathWord,
        required String groupPathWord,
        required BigInt limit,
        required BigInt offset}) =>
    RustLib.instance.api.crateApiApiComicChapters(
        comicPathWord: comicPathWord,
        groupPathWord: groupPathWord,
        limit: limit,
        offset: offset);

Future<UIPageComment> comments(
        {required String comicId,
        String? replyId,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiComments(
        comicId: comicId, replyId: replyId, offset: offset, limit: limit);

Future<void> sendComment(
        {required String comicId, required String comment, String? replyId}) =>
    RustLib.instance.api.crateApiApiSendComment(
        comicId: comicId, comment: comment, replyId: replyId);

Future<UIComicQuery> comicQuery({required String pathWord}) =>
    RustLib.instance.api.crateApiApiComicQuery(pathWord: pathWord);

Future<UIChapterData> comicChapterData(
        {required String comicPathWord, required String chapterUuid}) =>
    RustLib.instance.api.crateApiApiComicChapterData(
        comicPathWord: comicPathWord, chapterUuid: chapterUuid);

Future<UITags> tags() => RustLib.instance.api.crateApiApiTags();

Future<UIPageComicInExplore> exploreByAuthorName(
        {required String authorName,
        String? ordering,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiExploreByAuthorName(
        authorName: authorName,
        ordering: ordering,
        offset: offset,
        limit: limit);

Future<UIPageComicInExplore> exploreByAuthor(
        {required String author,
        String? ordering,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiExploreByAuthor(
        author: author, ordering: ordering, offset: offset, limit: limit);

Future<UIPageComicInExplore> explorer(
        {String? ordering,
        String? top,
        String? theme,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiExplorer(
        ordering: ordering,
        top: top,
        theme: theme,
        offset: offset,
        limit: limit);

Future<UIPageUIComicInList> comicSearch(
        {required String qType,
        required String q,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiComicSearch(
        qType: qType, q: q, offset: offset, limit: limit);

Future<void> viewComicInfo(
        {required String comicPathWord,
        required String comicName,
        required List<Author> comicAuthors,
        required String comicCover}) =>
    RustLib.instance.api.crateApiApiViewComicInfo(
        comicPathWord: comicPathWord,
        comicName: comicName,
        comicAuthors: comicAuthors,
        comicCover: comicCover);

Future<void> viewChapterPage(
        {required String comicPathWord,
        required String chapterUuid,
        required String chapterName,
        required PlatformInt64 chapterOrdered,
        required PlatformInt64 chapterSize,
        required PlatformInt64 chapterCount,
        required int pageRank}) =>
    RustLib.instance.api.crateApiApiViewChapterPage(
        comicPathWord: comicPathWord,
        chapterUuid: chapterUuid,
        chapterName: chapterName,
        chapterOrdered: chapterOrdered,
        chapterSize: chapterSize,
        chapterCount: chapterCount,
        pageRank: pageRank);

Future<UIViewLog?> findComicViewLog({required String pathWord}) =>
    RustLib.instance.api.crateApiApiFindComicViewLog(pathWord: pathWord);

Future<UIPageUIViewLog> listComicViewLogs(
        {required PlatformInt64 offset, required PlatformInt64 limit}) =>
    RustLib.instance.api
        .crateApiApiListComicViewLogs(offset: offset, limit: limit);

Future<void> collectToAccount(
        {required String comicId,
        required bool isCollect,
        required String comicPathWord}) =>
    RustLib.instance.api.crateApiApiCollectToAccount(
        comicId: comicId, isCollect: isCollect, comicPathWord: comicPathWord);

Future<UIPageCollectedComic> collectFromAccount(
        {required PlatformInt64 freeType,
        required String ordering,
        required BigInt offset,
        required BigInt limit}) =>
    RustLib.instance.api.crateApiApiCollectFromAccount(
        freeType: freeType, ordering: ordering, offset: offset, limit: limit);

Future<UICacheImage> cacheImage(
        {required String cacheKey,
        required String url,
        required String useful,
        String? extendsFieldFirst,
        String? extendsFieldSecond,
        String? extendsFieldThird}) =>
    RustLib.instance.api.crateApiApiCacheImage(
        cacheKey: cacheKey,
        url: url,
        useful: useful,
        extendsFieldFirst: extendsFieldFirst,
        extendsFieldSecond: extendsFieldSecond,
        extendsFieldThird: extendsFieldThird);

Future<void> cleanCache({required PlatformInt64 time}) =>
    RustLib.instance.api.crateApiApiCleanCache(time: time);

Future<void> deleteDownloadComic({required String comicPathWord}) =>
    RustLib.instance.api
        .crateApiApiDeleteDownloadComic(comicPathWord: comicPathWord);

Future<void> appendDownload({required UIQueryDownloadComic data}) =>
    RustLib.instance.api.crateApiApiAppendDownload(data: data);

Future<List<String>> inDownloadChapterUuid({required String comicPathWord}) =>
    RustLib.instance.api
        .crateApiApiInDownloadChapterUuid(comicPathWord: comicPathWord);

Future<void> resetFailDownloads() =>
    RustLib.instance.api.crateApiApiResetFailDownloads();

Future<List<UIDownloadComic>> downloadComics() =>
    RustLib.instance.api.crateApiApiDownloadComics();

Future<List<UIDownloadComicGroup>> downloadComicGroups(
        {required String comicPathWord}) =>
    RustLib.instance.api
        .crateApiApiDownloadComicGroups(comicPathWord: comicPathWord);

Future<List<UIDownloadComicChapter>> downloadComicChapters(
        {required String comicPathWord}) =>
    RustLib.instance.api
        .crateApiApiDownloadComicChapters(comicPathWord: comicPathWord);

Future<List<UIDownloadComicPage>> downloadComicPages(
        {required String comicPathWord, required String chapterUuid}) =>
    RustLib.instance.api.crateApiApiDownloadComicPages(
        comicPathWord: comicPathWord, chapterUuid: chapterUuid);

Future<bool> downloadIsPause() =>
    RustLib.instance.api.crateApiApiDownloadIsPause();

Future<void> downloadSetPause({required bool pause}) =>
    RustLib.instance.api.crateApiApiDownloadSetPause(pause: pause);

Future<String> httpGet({required String url}) =>
    RustLib.instance.api.crateApiApiHttpGet(url: url);

Future<String> desktopRoot() => RustLib.instance.api.crateApiApiDesktopRoot();

Future<void> exports(
        {required List<String> uuidList,
        required String exportToFolder,
        required ExportsType exportsType}) =>
    RustLib.instance.api.crateApiApiExports(
        uuidList: uuidList,
        exportToFolder: exportToFolder,
        exportsType: exportsType);

Future<String> getApiHost() => RustLib.instance.api.crateApiApiGetApiHost();

Future<void> setApiHost({required String api}) =>
    RustLib.instance.api.crateApiApiSetApiHost(api: api);

Future<void> deleteComicViewLog({required String pathWord}) =>
    RustLib.instance.api.crateApiApiDeleteComicViewLog(pathWord: pathWord);

Future<void> deleteAllComicViewLogs() =>
    RustLib.instance.api.crateApiApiDeleteAllComicViewLogs();

Future<void> copyImage({required String path, required String toDir}) =>
    RustLib.instance.api.crateApiApiCopyImage(path: path, toDir: toDir);

Future<List<Roast>> roasts({required String chapterId}) =>
    RustLib.instance.api.crateApiApiRoasts(chapterId: chapterId);

Future<UIPageBrowseComic> browser(
        {required BigInt offset, required BigInt limit}) =>
    RustLib.instance.api.crateApiApiBrowser(offset: offset, limit: limit);
